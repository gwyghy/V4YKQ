<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Output\General_Output.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Output\General_Output.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Fri Dec 29 08:44:51 2023
<BR><P>
<H3>Maximum Stack Usage =        480 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
RfidMng_Task &rArr; RfidSendDataProc &rArr; RfidMngSendFrame &rArr; RFID_SendData &rArr; RFTxSendPacket &rArr; SetRFChipIdle &rArr; RFID_HarewreInit &rArr; RfidConfig &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[32c]">__user_initial_stackheap</a>
 <LI><a href="#[149]">OS_CPU_SR_Save</a>
 <LI><a href="#[14b]">OS_CPU_SR_Restore</a>
 <LI><a href="#[160]">OSStartHighRdy</a>
 <LI><a href="#[166]">OSCtxSw</a>
 <LI><a href="#[15e]">OSIntCtxSw</a>
 <LI><a href="#[b1]">PendSV_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[ea]">AES_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ea]">AES_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[c5]">ADC1_IRQHandler</a> from adc.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[ea]">AES_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[f8]">APPMng_Task</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[23]">ActionInfoSynchroCodeDwlProc</a> from rfidupdate.o(.text) referenced 2 times from rfidupdate.o(.data)
 <LI><a href="#[22]">ActionInfoSynchroCodeWriteProc</a> from rfidupdate.o(.text) referenced 2 times from rfidupdate.o(.data)
 <LI><a href="#[21]">ActionInfoSynchroTransEndProc</a> from rfidupdate.o(.text) referenced 2 times from rfidupdate.o(.data)
 <LI><a href="#[25]">ActionInfoSynchroVersionDwlProc</a> from rfidupdate.o(.text) referenced 2 times from rfidupdate.o(.data)
 <LI><a href="#[24]">ActionInfoSynchroVersionWriteProc</a> from rfidupdate.o(.text) referenced 2 times from rfidupdate.o(.data)
 <LI><a href="#[f7]">BatteryMngTask</a> from battery.o(.text) referenced from main.o(.text)
 <LI><a href="#[ad]">BusFault_Handler</a> from stm32l1xx_it.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[eb]">COMP_ACQ_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[c9]">COMP_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[c8]">DAC_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[be]">DMA1_Channel1_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[bf]">DMA1_Channel2_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[c0]">DMA1_Channel3_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[c1]">DMA1_Channel4_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[c2]">DMA1_Channel5_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[c3]">DMA1_Channel6_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[c4]">DMA1_Channel7_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[e5]">DMA2_Channel1_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[e6]">DMA2_Channel2_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[e7]">DMA2_Channel3_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[e8]">DMA2_Channel4_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[e9]">DMA2_Channel5_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[b0]">DebugMon_Handler</a> from stm32l1xx_it.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[b9]">EXTI0_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[db]">EXTI15_10_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[ba]">EXTI1_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[bb]">EXTI2_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[bc]">EXTI3_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[bd]">EXTI4_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[ca]">EXTI9_5_IRQHandler</a> from rfid_cc1101.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[b7]">FLASH_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[ab]">HardFault_Handler</a> from stm32l1xx_it.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[d3]">I2C1_ER_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[d2]">I2C1_EV_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[d5]">I2C2_ER_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[d4]">I2C2_EV_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[f1]">IWDG_Task</a> from iwdg.o(.text) referenced from interface.o(.text)
 <LI><a href="#[e]">InterfaceModeActionInfoSyn</a> from interface.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[b]">InterfaceModeIdleProc</a> from interface.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[a]">InterfaceModeInchargeDisplayProc</a> from interface.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[c]">InterfaceModeInintProc</a> from interface.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[7]">InterfaceModeScGrpControlProc</a> from interface.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[6]">InterfaceModeScNeighborControlProc</a> from interface.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[5]">InterfaceModeScSelfControlProc</a> from interface.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[4]">InterfaceModeScSetProc</a> from interface.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[3]">InterfaceModeScUncertifiedProc</a> from interface.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[d]">InterfaceModeSelfRecvTransPrgProc</a> from interface.o(.text) referenced 6 times from interface.o(.data)
 <LI><a href="#[8]">InterfaceModeSelfSetProc</a> from interface.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[9]">InterfaceModeShutdownProc</a> from interface.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[f]">InterfaceModeWLUnConnectProc</a> from interface.o(.text) referenced 2 times from interface.o(.data)
 <LI><a href="#[f5]">Interface_task</a> from interface.o(.text) referenced from main.o(.text)
 <LI><a href="#[f3]">IrMng_Task</a> from irmng.o(.text) referenced from main.o(.text)
 <LI><a href="#[cb]">LCD_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[92]">LogicActionInfoSynchroReq</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[57]">LogicGETIRSendParamProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[91]">LogicGetActionInfoCrc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[53]">LogicGetBatterInchargeTimerProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[52]">LogicGetBatterVoltageBackupProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[50]">LogicGetBatteryAcrBackupProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[51]">LogicGetBatteryColDataBackupProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[8c]">LogicGetBatteryCoulomDataProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[8b]">LogicGetBatteryCoulomStatusProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[8a]">LogicGetBatteryStatusProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[5c]">LogicGetBatteryVoltage1Proc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[5d]">LogicGetBatteryVoltage2Proc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[84]">LogicGetButtonDownAckProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[83]">LogicGetButtonDownProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[86]">LogicGetButtonLongDownProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[85]">LogicGetButtonStatusProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[87]">LogicGetButtonUpProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[7a]">LogicGetColibrateScNumbProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[78]">LogicGetColibrateScTypeProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[8f]">LogicGetColibrateSuccessScNumbProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[5f]">LogicGetCtrlModeProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[7b]">LogicGetCtrlScNumbProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[58]">LogicGetFastColiearateEnableProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[7f]">LogicGetGrpAckActionNameProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[7e]">LogicGetGrpDirectionProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[80]">LogicGetGrpNearScNumbProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[81]">LogicGetGrpRemoteScNumbProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[4b]">LogicGetInterCtrlTimerProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[42]">LogicGetIrSendTimeoutProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[43]">LogicGetIrSendTimesProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[4c]">LogicGetNoteShowTimerProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[47]">LogicGetOledProtectBrightnessProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[48]">LogicGetOledProtectedTimerProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[46]">LogicGetOledScrLightProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[49]">LogicGetOledShutdownTimerProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[3f]">LogicGetPrgSecProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[7c]">LogicGetRfidFrameTypeProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[41]">LogicGetRfidSelfNumbProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[44]">LogicGetRfidSendTimeoutProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[45]">LogicGetRfidSendTimesProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[8d]">LogicGetRfidSignStatusProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[82]">LogicGetRunStatusProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[7d]">LogicGetScActionNameProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[88]">LogicGetScActionTypeProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[4d]">LogicGetScCtrlDislayTimerProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[89]">LogicGetScGejiaNumberProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[79]">LogicGetScNumbDirectProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[4f]">LogicGetShutDownFlagProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[5b]">LogicGetWLVersionProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[60]">LogicGetWlTestParamProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[54]">LogicGetYkqAppStationProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[4e]">LogicGetYkqIdBackupProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[40]">LogicGetYkqNumbProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[56]">LogicIRSendParamProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[55]">LogicResumeDefaultParamProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[90]">LogicSetActionInfoCrc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[3a]">LogicSetBatterInchargeTimerProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[39]">LogicSetBatterVoltageBackupProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[37]">LogicSetBatteryAcrBackupProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[38]">LogicSetBatteryColDataBackupProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[76]">LogicSetBatteryCoulomDataProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[75]">LogicSetBatteryCoulomStatusProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[74]">LogicSetBatteryStatusProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[6e]">LogicSetButtonDownAckProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[6d]">LogicSetButtonDownProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[70]">LogicSetButtonLongDownProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[6f]">LogicSetButtonStatusProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[71]">LogicSetButtonUpProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[31]">LogicSetColibarateTimeoutProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[64]">LogicSetColibrateScNumbProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[62]">LogicSetColibrateScTypeProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[8e]">LogicSetColibrateSuccessScNumbProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[5e]">LogicSetCtrlModeProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[65]">LogicSetCtrlScNumbProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[59]">LogicSetFastColiearateEnableProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[69]">LogicSetGrpAckActionNameProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[68]">LogicSetGrpDirectionProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[6a]">LogicSetGrpNearScNumbProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[6b]">LogicSetGrpRemoteScNumbProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[93]">LogicSetHeartProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[32]">LogicSetInterCtrlTimerProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[29]">LogicSetIrSendTimeoutProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[2a]">LogicSetIrSendTimesProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[94]">LogicSetNearCtrlReq</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[33]">LogicSetNoteShowTimerProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[2e]">LogicSetOledProtectBrightnessProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[2f]">LogicSetOledProtectedTimerProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[2d]">LogicSetOledScrLightProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[30]">LogicSetOledShutdownTimerProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[26]">LogicSetPrgSecProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[66]">LogicSetRfidFrameTypeProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[28]">LogicSetRfidSelfNumbProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[2b]">LogicSetRfidSendTimeoutProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[2c]">LogicSetRfidSendTimesProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[77]">LogicSetRfidSignStatusProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[6c]">LogicSetRunStatusProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[67]">LogicSetScActionNameProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[72]">LogicSetScActionTypeProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[34]">LogicSetScCtrlDislayTimerProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[73]">LogicSetScGejiaNumberProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[63]">LogicSetScNumbDirectProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[36]">LogicSetShutDownFlagProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[5a]">LogicSetWLVersionProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[35]">LogicSetYkqIdBackupProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[27]">LogicSetYkqNumbProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[96]">LogicStatusIdleProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[a0]">LogicStatusInintProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[99]">LogicStatusIrColibFailProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[97]">LogicStatusIrColibStartProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[98]">LogicStatusIrColibSuccessdProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[a6]">LogicStatusRfidCXBRecvPrgProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[a7]">LogicStatusRfidCXBRecvWLPrgProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[9c]">LogicStatusRfidColibFailProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[9a]">LogicStatusRfidColibStartProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[9b]">LogicStatusRfidColibSuccessdProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[a3]">LogicStatusRfidRecvPrgProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[a8]">LogicStatusRfidRecvWLPrgProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[a1]">LogicStatusRfidTransPrg0Proc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[a2]">LogicStatusRfidTransPrgProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[a4]">LogicStatusRfidTransWLPrgProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[9e]">LogicStatusRfidUnColibrateProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[9d]">LogicStatusScSelfCtrlProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[9f]">LogicStatusShutupProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[a5]">LogicStatusUsartTransWLPrgProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[3c]">LogicUpdateCxbPrgProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[3e]">LogicUpdateCxbWLPrgProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[3d]">LogicUpdateWLPrgProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[3b]">LogicUpdateYkqPrgProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[61]">LogicWlTestParamProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[95]">LogicWlTestSendProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[f2]">Logic_task</a> from logic.o(.text) referenced from main.o(.text)
 <LI><a href="#[4a]">LogicgGetColibarateTimeoutProc</a> from logic.o(.text) referenced 2 times from logic.o(.data)
 <LI><a href="#[ac]">MemManage_Handler</a> from stm32l1xx_it.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[aa]">NMI_Handler</a> from stm32l1xx_it.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[ee]">OSTaskSwHook</a> from os_cpu_c.o(.text) referenced from os_cpu_a.o(.text)
 <LI><a href="#[14e]">OS_TaskIdle</a> from os_core.o(.text) referenced from os_core.o(.text)
 <LI><a href="#[b4]">PVD_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[14]">ParEditIngProc</a> from interfacemenu.o(.text) referenced 2 times from interfacemenu.o(.data)
 <LI><a href="#[11]">ParEditInintProc</a> from interfacemenu.o(.text) referenced 2 times from interfacemenu.o(.data)
 <LI><a href="#[13]">ParEditPwrOkProc</a> from interfacemenu.o(.text) referenced 2 times from interfacemenu.o(.data)
 <LI><a href="#[12]">ParEditPwrProc</a> from interfacemenu.o(.text) referenced 2 times from interfacemenu.o(.data)
 <LI><a href="#[15]">ParEditSelGlobalProc</a> from interfacemenu.o(.text) referenced 2 times from interfacemenu.o(.data)
 <LI><a href="#[16]">ParEditSelOkProc</a> from interfacemenu.o(.text) referenced 2 times from interfacemenu.o(.data)
 <LI><a href="#[10]">ParEditStartProc</a> from interfacemenu.o(.text) referenced 2 times from interfacemenu.o(.data)
 <LI><a href="#[b1]">PendSV_Handler</a> from os_cpu_a.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[b8]">RCC_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[dc]">RTC_Alarm_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[b6]">RTC_WKUP_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[a9]">Reset_Handler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[2c9]">RfidMessageForRfidRcved</a> from rfidmng.o(.text) referenced from rfidmng.o(.text)
 <LI><a href="#[f0]">RfidMng_Task</a> from rfidmng.o(.text) referenced 9 times from interface.o(.text)
 <LI><a href="#[ef]">RfidMng_Update_Task</a> from rfidupdate.o(.text) referenced 5 times from interface.o(.text)
 <LI><a href="#[19]">RfidUpdateCodeDwlProc</a> from rfidupdate.o(.text) referenced 2 times from rfidupdate.o(.data)
 <LI><a href="#[18]">RfidUpdateCodeWriteProc</a> from rfidupdate.o(.text) referenced 2 times from rfidupdate.o(.data)
 <LI><a href="#[17]">RfidUpdateTransEndProc</a> from rfidupdate.o(.text) referenced 2 times from rfidupdate.o(.data)
 <LI><a href="#[1b]">RfidUpdateVersionDwlProc</a> from rfidupdate.o(.text) referenced 2 times from rfidupdate.o(.data)
 <LI><a href="#[1a]">RfidUpdateVersionWriteProc</a> from rfidupdate.o(.text) referenced 2 times from rfidupdate.o(.data)
 <LI><a href="#[e0]">SDIO_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[d6]">SPI1_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[d7]">SPI2_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[e2]">SPI3_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[af]">SVC_Handler</a> from stm32l1xx_it.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[f6]">ScanKey_task</a> from keyapp.o(.text) referenced from main.o(.text)
 <LI><a href="#[b2]">SysTick_Handler</a> from stm32l1xx_it.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[ec]">SystemInit</a> from system_stm32l1xx.o(.text) referenced from startup_stm32l1xx_hd.o(.text)
 <LI><a href="#[b5]">TAMPER_STAMP_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[cd]">TIM10_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[ce]">TIM11_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[cf]">TIM2_IRQHandler</a> from ir_send.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[d0]">TIM3_IRQHandler</a> from ir_send.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[d1]">TIM4_IRQHandler</a> from uart1.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[e1]">TIM5_IRQHandler</a> from keyled.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[de]">TIM6_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[df]">TIM7_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[cc]">TIM9_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[e3]">UART4_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[e4]">UART5_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[d8]">USART1_IRQHandler</a> from uart.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[d9]">USART2_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[da]">USART3_IRQHandler</a> from uart1.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[dd]">USB_FS_WKUP_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[c6]">USB_HP_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[c7]">USB_LP_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[ae]">UsageFault_Handler</a> from stm32l1xx_it.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[f4]">Usart_Task</a> from rfidmng.o(.text) referenced from main.o(.text)
 <LI><a href="#[1e]">WL_RfidUpdateCodeDwlProc</a> from rfidupdate.o(.text) referenced 2 times from rfidupdate.o(.data)
 <LI><a href="#[1d]">WL_RfidUpdateCodeWriteProc</a> from rfidupdate.o(.text) referenced 2 times from rfidupdate.o(.data)
 <LI><a href="#[1c]">WL_RfidUpdateTransEndProc</a> from rfidupdate.o(.text) referenced 2 times from rfidupdate.o(.data)
 <LI><a href="#[20]">WL_RfidUpdateVersionDwlProc</a> from rfidupdate.o(.text) referenced 2 times from rfidupdate.o(.data)
 <LI><a href="#[1f]">WL_RfidUpdateVersionWriteProc</a> from rfidupdate.o(.text) referenced 2 times from rfidupdate.o(.data)
 <LI><a href="#[b3]">WWDG_IRQHandler</a> from startup_stm32l1xx_hd.o(.text) referenced from startup_stm32l1xx_hd.o(RESET)
 <LI><a href="#[fb]">__main</a> from __main.o(!!!main) referenced from startup_stm32l1xx_hd.o(.text)
 <LI><a href="#[fa]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[f9]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[fb]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[fc]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[fe]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[32e]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[32f]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[330]"></a>__decompress</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[331]"></a>__decompress2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[332]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[ff]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[321]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[101]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[333]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[106]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[334]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[335]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[336]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[337]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[338]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[339]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[33a]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[33b]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[33c]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[33d]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[33e]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[33f]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[340]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[341]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[342]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[343]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[344]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[345]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[346]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[347]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[348]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[10b]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[349]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[34a]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[34b]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[34c]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[34d]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[34e]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[34f]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[350]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[fd]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[351]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[103]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[105]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[352]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[107]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Driver_Init &rArr; RFID_Init &rArr; RFID_HarewreInit &rArr; RfidConfig &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[353]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[32d]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[10a]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[354]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[10c]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[a9]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[ea]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[eb]"></a>COMP_ACQ_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[c8]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[bf]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[c2]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[c3]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[c4]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[e5]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[e6]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[e7]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[e8]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[e9]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[bb]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[d3]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[d2]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[d5]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[d4]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[cb]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[dc]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[e0]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[d6]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[e2]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>TAMPER_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[cd]"></a>TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[de]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[df]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[cc]"></a>TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[e3]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[e4]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[d9]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[dd]"></a>USB_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l1xx_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[32c]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32l1xx_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[ec]"></a>SystemInit</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, system_stm32l1xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(.text)
</UL>
<P><STRONG><a name="[355]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, system_stm32l1xx.o(.text), UNUSED)

<P><STRONG><a name="[19c]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[1b9]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRfidIntIO
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputAdcInit
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlUsartInit
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Int_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedInit
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrUsartInit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrSendTIMConfig
</UL>

<P><STRONG><a name="[356]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[357]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[358]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>ADC_DeInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32l1xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputAdcInit
</UL>

<P><STRONG><a name="[1b7]"></a>ADC_Init</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32l1xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputAdcInit
</UL>

<P><STRONG><a name="[359]"></a>ADC_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>ADC_CommonInit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputAdcInit
</UL>

<P><STRONG><a name="[35a]"></a>ADC_CommonStructInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1bb]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputAdcInit
</UL>

<P><STRONG><a name="[35b]"></a>ADC_BankSelection</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[35c]"></a>ADC_PowerDownCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[35d]"></a>ADC_DelaySelectionConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[35e]"></a>ADC_AnalogWatchdogCmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[35f]"></a>ADC_AnalogWatchdogThresholdsConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[360]"></a>ADC_AnalogWatchdogSingleChannelConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputAdcInit
</UL>

<P><STRONG><a name="[1b8]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 344 bytes, Stack size 20 bytes, stm32l1xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputAdcInit
</UL>

<P><STRONG><a name="[1c1]"></a>ADC_SoftwareStartConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputAdcInit
</UL>

<P><STRONG><a name="[361]"></a>ADC_GetSoftwareStartConvStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[362]"></a>ADC_EOCOnEachRegularChannelCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[363]"></a>ADC_ContinuousModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[364]"></a>ADC_DiscModeChannelCountConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[365]"></a>ADC_DiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[366]"></a>ADC_GetConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputAdcInit
</UL>

<P><STRONG><a name="[1c0]"></a>ADC_DMARequestAfterLastTransferCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputAdcInit
</UL>

<P><STRONG><a name="[367]"></a>ADC_InjectedChannelConfig</STRONG> (Thumb, 232 bytes, Stack size 20 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[368]"></a>ADC_InjectedSequencerLengthConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[369]"></a>ADC_SetInjectedOffset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[36a]"></a>ADC_ExternalTrigInjectedConvConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[36b]"></a>ADC_ExternalTrigInjectedConvEdgeConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[36c]"></a>ADC_SoftwareStartInjectedConv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[36d]"></a>ADC_GetSoftwareStartInjectedConvCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[36e]"></a>ADC_AutoInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[36f]"></a>ADC_InjectedDiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[370]"></a>ADC_GetInjectedConversionValue</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>ADC_ITConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l1xx_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputAdcInit
</UL>

<P><STRONG><a name="[1bc]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputAdcInit
</UL>

<P><STRONG><a name="[1c4]"></a>ADC_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>

<P><STRONG><a name="[371]"></a>ADC_GetITStatus</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[372]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_adc.o(.text), UNUSED)

<P><STRONG><a name="[1bd]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32l1xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputAdcInit
</UL>

<P><STRONG><a name="[1be]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32l1xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputAdcInit
</UL>

<P><STRONG><a name="[373]"></a>DMA_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[1c2]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputAdcInit
</UL>

<P><STRONG><a name="[374]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[375]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[376]"></a>DMA_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[377]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32l1xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[378]"></a>DMA_ClearFlag</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[379]"></a>DMA_GetITStatus</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32l1xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[37a]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[37b]"></a>EXTI_DeInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l1xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[229]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32l1xx_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRfidIntIO
</UL>

<P><STRONG><a name="[37c]"></a>EXTI_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[37d]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[23b]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[23c]"></a>EXTI_ClearFlag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_exti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[37e]"></a>EXTI_GetITStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[37f]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_exti.o(.text), UNUSED)

<P><STRONG><a name="[24a]"></a>FLASH_SetLatency</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrg0Proc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateTransEndProc
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateCodeDwlProc
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateVersionDwlProc
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateTransEndProc
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateCodeDwlProc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateVersionDwlProc
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootDateUpdate
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteActionInfo
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeSelfRecvTransPrgProc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrgProc
</UL>

<P><STRONG><a name="[380]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[381]"></a>FLASH_ReadAccess64Cmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[382]"></a>FLASH_SLEEPPowerDownCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>DATA_EEPROM_Unlock</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_Unlock
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteWords
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteBytes
</UL>

<P><STRONG><a name="[112]"></a>FLASH_Unlock</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, stm32l1xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrg0Proc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateTransEndProc
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateCodeDwlProc
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateVersionDwlProc
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateTransEndProc
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateCodeDwlProc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateVersionDwlProc
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootDateUpdate
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteActionInfo
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeSelfRecvTransPrgProc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrgProc
</UL>

<P><STRONG><a name="[24e]"></a>FLASH_Lock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrg0Proc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateTransEndProc
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateCodeDwlProc
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateTransEndProc
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateCodeDwlProc
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteActionInfo
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeSelfRecvTransPrgProc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrgProc
</UL>

<P><STRONG><a name="[115]"></a>FLASH_GetStatus</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[114]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32l1xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_BootConfig
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_BORConfig
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_UserConfig
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_PCROPSelectionConfig
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_PCROP1Config
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_PCROPConfig
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_RDPConfig
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_WRP2Config
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_WRP1Config
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_OB_WRPConfig
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_ProgramWord
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_ProgramHalfWord
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_ProgramByte
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramWord
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramHalfWord
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramByte
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_EraseWord
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_EraseHalfWord
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_EraseByte
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FastProgramWord
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[116]"></a>FLASH_ErasePage</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, stm32l1xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlashErasePage
</UL>

<P><STRONG><a name="[117]"></a>FLASH_FastProgramWord</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32l1xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_FastProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapFlagClear
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapFlagSet
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapWriteCrc
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapWriteCodeLen
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapLoadCode
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlashWriteBuf
</UL>

<P><STRONG><a name="[241]"></a>DATA_EEPROM_Lock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteWords
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteBytes
</UL>

<P><STRONG><a name="[383]"></a>DATA_EEPROM_FixedTimeProgramCmd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>DATA_EEPROM_EraseByte</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[119]"></a>DATA_EEPROM_EraseHalfWord</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[11a]"></a>DATA_EEPROM_EraseWord</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[11b]"></a>DATA_EEPROM_FastProgramByte</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32l1xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DATA_EEPROM_FastProgramByte &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteBytes
</UL>

<P><STRONG><a name="[11c]"></a>DATA_EEPROM_FastProgramHalfWord</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[11d]"></a>DATA_EEPROM_FastProgramWord</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32l1xx_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DATA_EEPROM_FastProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteBytes
</UL>

<P><STRONG><a name="[11e]"></a>DATA_EEPROM_ProgramByte</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[11f]"></a>DATA_EEPROM_ProgramHalfWord</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[120]"></a>DATA_EEPROM_ProgramWord</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteWords
</UL>

<P><STRONG><a name="[121]"></a>FLASH_OB_Unlock</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_Unlock
</UL>

<P><STRONG><a name="[384]"></a>FLASH_OB_Lock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[385]"></a>FLASH_OB_Launch</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>FLASH_OB_WRPConfig</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[123]"></a>FLASH_OB_WRP1Config</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[124]"></a>FLASH_OB_WRP2Config</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[125]"></a>FLASH_OB_RDPConfig</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[126]"></a>FLASH_OB_PCROPConfig</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[127]"></a>FLASH_OB_PCROP1Config</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[128]"></a>FLASH_OB_PCROPSelectionConfig</STRONG> (Thumb, 72 bytes, Stack size 28 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[129]"></a>FLASH_OB_UserConfig</STRONG> (Thumb, 92 bytes, Stack size 28 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[12a]"></a>FLASH_OB_BORConfig</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[12b]"></a>FLASH_OB_BootConfig</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, stm32l1xx_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[386]"></a>FLASH_OB_GetUser</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[387]"></a>FLASH_OB_GetWRP</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[388]"></a>FLASH_OB_GetWRP1</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[389]"></a>FLASH_OB_GetWRP2</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[38a]"></a>FLASH_OB_GetRDP</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[38b]"></a>FLASH_OB_GetSPRMOD</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[38c]"></a>FLASH_OB_GetBOR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[38d]"></a>FLASH_ITConfig</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[38e]"></a>FLASH_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text), UNUSED)

<P><STRONG><a name="[240]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteWords
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteBytes
</UL>

<P><STRONG><a name="[12c]"></a>GPIO_DeInit</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, stm32l1xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphResetCmd
</UL>

<P><STRONG><a name="[19e]"></a>GPIO_Init</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, stm32l1xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_SpiPortInit
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledLowLevelInit
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputAdcInit
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlUsartInit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwrPinInint
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NcIoInit
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedInit
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInit
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrUsartInit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrSendTIMConfig
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputInit
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[38f]"></a>GPIO_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[390]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32l1xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1e3]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitGPIOReset
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputGetValue
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScanProc
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicShutdownProc
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceTaskStartProc
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusInintProc
</UL>

<P><STRONG><a name="[19f]"></a>GPIO_ReadInputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[391]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[392]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiResetChipSingle
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidStrobe
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMcuRead
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMcuWrite
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedScan
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedShift_595
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_CP_595
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_CP_595
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScanProc
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateLed
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledLowLevelInit
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledWriteData
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledWriteCommand
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwrPinInint
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedInit
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrUsartInit
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicShutdownProc
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceTaskStartProc
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeIdleProc
</UL>

<P><STRONG><a name="[1c6]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiResetChipSingle
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidStrobe
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMcuRead
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMcuWrite
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedScan
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedShift_595
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_CP_595
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_CP_595
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScanProc
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateLed
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledLowLevelInit
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledWriteData
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledWriteCommand
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwrPinInint
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NcIoInit
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedInit
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInit
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicUpdateCxbWLPrgProc
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicUpdateWLPrgProc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicUpdateYkqPrgProc
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicShutdownProc
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeIdleProc
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicActionInfoSynchroProc
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicUpdateCxbPrgProc
</UL>

<P><STRONG><a name="[393]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[394]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[395]"></a>GPIO_ToggleBits</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1f9]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32l1xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_SpiPortInit
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlUsartInit
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrUsartInit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrSendTIMConfig
</UL>

<P><STRONG><a name="[29d]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SleepConfiguration
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
</UL>

<P><STRONG><a name="[29e]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
</UL>

<P><STRONG><a name="[29f]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SleepConfiguration
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
</UL>

<P><STRONG><a name="[2a0]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SleepConfiguration
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
</UL>

<P><STRONG><a name="[2a1]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
</UL>

<P><STRONG><a name="[396]"></a>IWDG_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_iwdg.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>PWR_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32l1xx_pwr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>

<P><STRONG><a name="[397]"></a>PWR_RTCAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[398]"></a>PWR_PVDLevelConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[314]"></a>PWR_PVDCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_pwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicShutdownProc
</UL>

<P><STRONG><a name="[313]"></a>PWR_WakeUpPinCmd</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l1xx_pwr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWR_WakeUpPinCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicShutdownProc
</UL>

<P><STRONG><a name="[399]"></a>PWR_FastWakeUpCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[39a]"></a>PWR_UltraLowPowerCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[39b]"></a>PWR_VoltageScalingConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[39c]"></a>PWR_EnterLowPowerRunMode</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32l1xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[39d]"></a>PWR_EnterSleepMode</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32l1xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[39e]"></a>PWR_EnterSTOPMode</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32l1xx_pwr.o(.text), UNUSED)

<P><STRONG><a name="[316]"></a>PWR_EnterSTANDBYMode</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32l1xx_pwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicShutdownProc
</UL>

<P><STRONG><a name="[315]"></a>PWR_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_pwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicShutdownProc
</UL>

<P><STRONG><a name="[297]"></a>PWR_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l1xx_pwr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicShutdownProc
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceTaskStartProc
</UL>

<P><STRONG><a name="[39f]"></a>RCC_DeInit</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[30f]"></a>RCC_HSEConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicShutdownProc
</UL>

<P><STRONG><a name="[131]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32l1xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[130]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32l1xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[3a0]"></a>RCC_AdjustMSICalibrationValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3a1]"></a>RCC_MSIRangeConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[310]"></a>RCC_MSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicShutdownProc
</UL>

<P><STRONG><a name="[3a2]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputAdcInit
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicShutdownProc
</UL>

<P><STRONG><a name="[311]"></a>RCC_LSEConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicShutdownProc
</UL>

<P><STRONG><a name="[312]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicShutdownProc
</UL>

<P><STRONG><a name="[3a3]"></a>RCC_PLLConfig</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3a4]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3a5]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3a6]"></a>RCC_LSEClockSecuritySystemCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3a7]"></a>RCC_MCOConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3a8]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3a9]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3aa]"></a>RCC_HCLKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3ab]"></a>RCC_PCLK1Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3ac]"></a>RCC_PCLK2Config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 248 bytes, Stack size 20 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
</UL>

<P><STRONG><a name="[3ad]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3ae]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3af]"></a>RCC_RTCResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[19d]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_SpiPortInit
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledLowLevelInit
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputAdcInit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwrPinInint
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NcIoInit
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedInit
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInit
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrUsartInit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrSendTIMConfig
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputInit
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicShutdownProc
</UL>

<P><STRONG><a name="[1b4]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_SpiPortInit
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputAdcInit
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrUsartInit
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicShutdownProc
</UL>

<P><STRONG><a name="[1e7]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_SpiPortInit
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlUsartInit
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Int_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedInit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrSendTIMConfig
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicShutdownProc
</UL>

<P><STRONG><a name="[12d]"></a>RCC_AHBPeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[111]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_DeInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrUsartInit
</UL>

<P><STRONG><a name="[12f]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_DeInit
</UL>

<P><STRONG><a name="[3b0]"></a>RCC_AHBPeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3b1]"></a>RCC_APB2PeriphClockLPModeCmd</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3b2]"></a>RCC_APB1PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3b3]"></a>RCC_ITConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3b4]"></a>RCC_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3b5]"></a>RCC_GetITStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[3b6]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32l1xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[22e]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32l1xx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_SpiInit
</UL>

<P><STRONG><a name="[133]"></a>I2S_Init</STRONG> (Thumb, 212 bytes, Stack size 56 bytes, stm32l1xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[3b7]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[3b8]"></a>I2S_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[22f]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_SpiInit
</UL>

<P><STRONG><a name="[3b9]"></a>I2S_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[3ba]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[3bb]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[3bc]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[3bd]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[221]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_SPI_SendByte
</UL>

<P><STRONG><a name="[220]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_SPI_SendByte
</UL>

<P><STRONG><a name="[3be]"></a>SPI_CalculateCRC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[3bf]"></a>SPI_TransmitCRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[3c0]"></a>SPI_GetCRC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[3c1]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[3c2]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[3c3]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[21f]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_SPI_SendByte
</UL>

<P><STRONG><a name="[3c4]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[3c5]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[3c6]"></a>SPI_I2S_ClearITPendingBit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l1xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>SYSCFG_DeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32l1xx_syscfg.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[3c7]"></a>SYSCFG_RIDeInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32l1xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[3c8]"></a>SYSCFG_MemoryRemapConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[3c9]"></a>SYSCFG_GetBootMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[3ca]"></a>SYSCFG_USBPuCmd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l1xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[228]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32l1xx_syscfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRfidIntIO
</UL>

<P><STRONG><a name="[3cb]"></a>SYSCFG_RITIMSelect</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[3cc]"></a>SYSCFG_RITIMInputCaptureConfig</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, stm32l1xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[3cd]"></a>SYSCFG_RIResistorConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[3ce]"></a>SYSCFG_RIChannelSpeedConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32l1xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[3cf]"></a>SYSCFG_RIIOSwitchConfig</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, stm32l1xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[3d0]"></a>SYSCFG_RISwitchControlModeCmd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32l1xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[3d1]"></a>SYSCFG_RIHysteresisConfig</STRONG> (Thumb, 282 bytes, Stack size 8 bytes, stm32l1xx_syscfg.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32l1xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[136]"></a>USART_Init</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, stm32l1xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlUsartInit
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrUsartInit
</UL>

<P><STRONG><a name="[3d2]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3d3]"></a>USART_ClockInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3d4]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1fb]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlUsartInit
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrUsartInit
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrMngSendDataProc
</UL>

<P><STRONG><a name="[3d5]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3d6]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3d7]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1ff]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartSendDataProc
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsUsartTrsQueue
</UL>

<P><STRONG><a name="[1fd]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[3d8]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3d9]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3da]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3db]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3dc]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3dd]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3de]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3df]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3e0]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3e1]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3e2]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3e3]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[3e4]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[1fa]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32l1xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlUsartInit
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrUsartInit
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartSendDataProc
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsUsartTrsQueue
</UL>

<P><STRONG><a name="[244]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[245]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[1fc]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32l1xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1fe]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32l1xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[137]"></a>TIM_DeInit</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, stm32l1xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedInit
</UL>

<P><STRONG><a name="[1e8]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Int_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedInit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrSendTIMConfig
</UL>

<P><STRONG><a name="[1e6]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedInit
</UL>

<P><STRONG><a name="[3e5]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3e6]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3e7]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3e8]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3e9]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3ea]"></a>TIM_GetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3eb]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3ec]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedInit
</UL>

<P><STRONG><a name="[3ed]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3ee]"></a>TIM_SetClockDivision</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrLOCSendInsertTxBuf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrSendInsertTxBuf
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Int_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedInit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrSendTIMConfig
</UL>

<P><STRONG><a name="[3ef]"></a>TIM_OC1Init</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[202]"></a>TIM_OC2Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32l1xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrSendTIMConfig
</UL>

<P><STRONG><a name="[200]"></a>TIM_OC3Init</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32l1xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrSendTIMConfig
</UL>

<P><STRONG><a name="[3f0]"></a>TIM_OC4Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3f1]"></a>TIM_OCStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3f2]"></a>TIM_SelectOCxM</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3f3]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[205]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[208]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[3f4]"></a>TIM_SetCompare4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3f5]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3f6]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3f7]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3f8]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3f9]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[203]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrSendTIMConfig
</UL>

<P><STRONG><a name="[201]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrSendTIMConfig
</UL>

<P><STRONG><a name="[3fa]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3fb]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3fc]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3fd]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3fe]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3ff]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[400]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[401]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[402]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[403]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[404]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[405]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[406]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[407]"></a>TIM_SelectOCREFClear</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[206]"></a>TIM_CCxCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32l1xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_CCxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrLOCSendInsertTxBuf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrSendInsertTxBuf
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[140]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[13e]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[13c]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[13a]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[138]"></a>TIM_ICInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
</UL>

<P><STRONG><a name="[408]"></a>TIM_ICStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>TIM_PWMIConfig</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[409]"></a>TIM_GetCapture1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[204]"></a>TIM_GetCapture2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[207]"></a>TIM_GetCapture3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[40a]"></a>TIM_GetCapture4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Int_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedInit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrSendTIMConfig
</UL>

<P><STRONG><a name="[40b]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[40c]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1f6]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Int_Init
</UL>

<P><STRONG><a name="[1f4]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32l1xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[1f5]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Int_Init
</UL>

<P><STRONG><a name="[40d]"></a>TIM_DMAConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[40e]"></a>TIM_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[40f]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[1e9]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedInit
</UL>

<P><STRONG><a name="[143]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[142]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[144]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[146]"></a>TIM_ETRConfig</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[145]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[147]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[410]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[411]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[412]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[413]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[414]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[415]"></a>TIM_RemapConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32l1xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>OS_StrCopy</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameGet
</UL>

<P><STRONG><a name="[148]"></a>OSEventNameGet</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>

<P><STRONG><a name="[14d]"></a>OS_StrLen</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
</UL>

<P><STRONG><a name="[14c]"></a>OSEventNameSet</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>

<P><STRONG><a name="[14e]"></a>OS_TaskIdle</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(.text)
</UL>
<P><STRONG><a name="[154]"></a>OS_MemClr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
</UL>

<P><STRONG><a name="[156]"></a>OSInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitMisc
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitRdyList
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitEventList
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c3]"></a>OSIntEnter</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>

<P><STRONG><a name="[15c]"></a>OSIntExit</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[15f]"></a>OSStart</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSStart
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[161]"></a>OSTimeTick</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[416]"></a>OSVersion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_core.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>OS_Dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[164]"></a>OS_EventTaskRemove</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>

<P><STRONG><a name="[163]"></a>OS_EventTaskRdy</STRONG> (Thumb, 114 bytes, Stack size 36 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
</UL>

<P><STRONG><a name="[17e]"></a>OS_EventTaskWait</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskWait
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
</UL>

<P><STRONG><a name="[17a]"></a>OS_EventWaitListInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
</UL>

<P><STRONG><a name="[195]"></a>OS_MemCopy</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
</UL>

<P><STRONG><a name="[165]"></a>OS_Sched</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspendIf0
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[167]"></a>OS_TaskStatStkChk</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, os_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
</UL>

<P><STRONG><a name="[169]"></a>OS_TCBInit</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[16c]"></a>OSFlagAccept</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[16d]"></a>OSFlagCreate</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[16f]"></a>OS_FlagUnlink</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, os_flag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_FlagUnlink
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
</UL>

<P><STRONG><a name="[170]"></a>OSFlagDel</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[171]"></a>OSFlagNameGet</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>

<P><STRONG><a name="[172]"></a>OSFlagNameSet</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>

<P><STRONG><a name="[173]"></a>OSFlagPend</STRONG> (Thumb, 616 bytes, Stack size 72 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagBlock
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[175]"></a>OSFlagPendGetFlagsRdy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[176]"></a>OSFlagPost</STRONG> (Thumb, 312 bytes, Stack size 48 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[177]"></a>OSFlagQuery</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[15a]"></a>OS_FlagInit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, os_flag.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_FlagInit
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[178]"></a>OSMutexAccept</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, os_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[179]"></a>OSMutexCreate</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, os_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromInint
</UL>

<P><STRONG><a name="[17b]"></a>OSMutexDel</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, os_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutex_RdyAtPrio
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>

<P><STRONG><a name="[17d]"></a>OSMutexPend</STRONG> (Thumb, 568 bytes, Stack size 56 bytes, os_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = OSMutexPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteWords
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteBytes
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadWords
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadBytes
</UL>

<P><STRONG><a name="[17f]"></a>OSMutexPost</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, os_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutex_RdyAtPrio
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteWords
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteBytes
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadWords
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadBytes
</UL>

<P><STRONG><a name="[180]"></a>OSMutexQuery</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, os_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[181]"></a>OSSemAccept</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[182]"></a>OSSemCreate</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRecvSemCreate
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInit
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrUsartInit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrSendTIMConfig
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_Init
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicInint
</UL>

<P><STRONG><a name="[183]"></a>OSSemDel</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>

<P><STRONG><a name="[184]"></a>OSSemPend</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrLOCSendInsertTxBuf
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrSendInsertTxBuf
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSendDataProc
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartSendDataProc
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsUsartTrsQueue
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrMng_Task
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrMngSendDataProc
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryMngTask
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMng_Update_Task
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMng_Task
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_task
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGrpActionStartPro
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceActionKeyUpPro
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceActionKeyDownPro
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyShuntDownPro
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyNeighborPro
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScNeighborControlProc
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScSelfControlProc
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScUncertifiedProc
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScSetProc
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeIdleProc
</UL>

<P><STRONG><a name="[185]"></a>OSSemPendAbort</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>

<P><STRONG><a name="[186]"></a>OSSemPost</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, os_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcceptKey
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrg0Proc
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateRecvDataProc
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionInfoSynchroVersionDwlProc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateTransEndProc
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateCodeDwlProc
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateVersionDwlProc
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateTransEndProc
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateCodeDwlProc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateVersionDwlProc
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartRecvInvalidDataProc
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRecvInvalidDataProc
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRecvWaitTimeoutProc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRecvDataProc
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartBeatCommErrTimer
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMessageForRfidRcved
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrMngSendDataProc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_task
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceTaskStartProc
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfacePeriodicProc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainScUnColibrate
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeWLUnConnectProc
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeSelfRecvTransPrgProc
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeInchargeDisplayProc
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScNeighborControlProc
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScSelfControlProc
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScUncertifiedProc
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScSetProc
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeIdleProc
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRfidTestShow
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicPeriodSampleProc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidCXBRecvPrgProc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidCXBRecvWLPrgProc
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusUnconnectWLProc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidRecvWLPrgProc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusUsartTransWLPrgProc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransWLPrgProc
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusActionInfoReqProc
</UL>

<P><STRONG><a name="[187]"></a>OSSemQuery</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[188]"></a>OSSemSet</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, os_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[189]"></a>OSTaskCreate</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrg0Proc
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionInfoSynchroTransEndProc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateTransEndProc
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateCodeDwlProc
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateTransEndProc
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateCodeDwlProc
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfacePeriodicProc
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeSelfRecvTransPrgProc
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeIdleProc
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPMng_Task
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidCXBRecvPrgProc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidCXBRecvWLPrgProc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidRecvWLPrgProc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusUsartTransWLPrgProc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransWLPrgProc
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusActionInfoReqProc
</UL>

<P><STRONG><a name="[18b]"></a>OS_TaskStkClr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[151]"></a>OSTaskCreateExt</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStkClr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceTaskStartProc
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18c]"></a>OSTaskDel</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = OSTaskDel &rArr; OS_FlagUnlink
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelHook
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Dummy
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrg0Proc
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionInfoSynchroTransEndProc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateTransEndProc
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateCodeDwlProc
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateTransEndProc
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateCodeDwlProc
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfacePeriodicProc
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeSelfRecvTransPrgProc
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeIdleProc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidCXBRecvPrgProc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidCXBRecvWLPrgProc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidRecvWLPrgProc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusUsartTransWLPrgProc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransWLPrgProc
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusActionInfoReqProc
</UL>

<P><STRONG><a name="[18f]"></a>OSTaskDelReq</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[190]"></a>OSTaskNameGet</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>

<P><STRONG><a name="[152]"></a>OSTaskNameSet</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrLen
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_StrCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTaskIdle
</UL>

<P><STRONG><a name="[191]"></a>OSTaskResume</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTaskResume &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrg0Proc
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionInfoSynchroTransEndProc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateTransEndProc
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateCodeDwlProc
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateTransEndProc
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateCodeDwlProc
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfacePeriodicProc
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeSelfRecvTransPrgProc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidRecvWLPrgProc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusUsartTransWLPrgProc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransWLPrgProc
</UL>

<P><STRONG><a name="[168]"></a>OSTaskStkChk</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>

<P><STRONG><a name="[192]"></a>OSTaskSuspend</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrg0Proc
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateTransEndProc
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceTaskStartProc
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceStopKeyLongDownPro
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeWLUnConnectProc
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeSelfRecvTransPrgProc
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeInchargeDisplayProc
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScSelfControlProc
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScSetProc
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeSelfSetProc
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeIdleProc
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPMng_Task
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicPeriodSampleProc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidCXBRecvPrgProc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidCXBRecvWLPrgProc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidRecvWLPrgProc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrgProc
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusActionInfoReqProc
</UL>

<P><STRONG><a name="[193]"></a>OSTaskSuspendIf0</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, os_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[194]"></a>OSTaskQuery</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, os_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTaskQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicShutdownProc
</UL>

<P><STRONG><a name="[196]"></a>OSTimeDly</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, os_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrg0Proc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateTransEndProc
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateTransEndProc
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Task
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSendDataProc
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRecvInvalidDataProc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRecvDataProc
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSendFrame
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngInint
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrMng_Task
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrMngSendDataProc
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryMngTask
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryChongdianPinProc
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputInt
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanKey_task
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateMngInint
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicShutdownProc
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Task
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_task
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceTaskStartProc
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfacePeriodicProc
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceStopKeyLongDownPro
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceShiftKeyLongDownPro
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeSelfRecvTransPrgProc
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScNeighborControlProc
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScSelfControlProc
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScUncertifiedProc
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScSetProc
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeIdleProc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logic_task
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateSendPrg
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusUnconnectWLProc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidRecvWLPrgProc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusUsartTransWLPrgProc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransWLPrgProc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrgProc
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusIrColibStartProc
</UL>

<P><STRONG><a name="[197]"></a>OSTimeDlyHMSM</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>

<P><STRONG><a name="[198]"></a>OSTimeDlyResume</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[199]"></a>OSTimeGet</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[19a]"></a>OSTimeSet</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, os_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[157]"></a>OSInitHookBegin</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[15b]"></a>OSInitHookEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[16b]"></a>OSTaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[18e]"></a>OSTaskDelHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
</UL>

<P><STRONG><a name="[14f]"></a>OSTaskIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[417]"></a>OSTaskStatHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>OSTaskStkInit</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, os_cpu_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OSTaskStkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[ee]"></a>OSTaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(.text)
</UL>
<P><STRONG><a name="[16a]"></a>OSTCBInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[162]"></a>OSTimeTickHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[149]"></a>OS_CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeSet
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspendIf0
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelReq
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemQuery
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexQuery
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexAccept
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPendGetFlagsRdy
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameGet
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendResponseData
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_GetFrame
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidStrobe
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRxMode
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFTxSendPacket
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_GetFrame
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setColiScNumStatus
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcceptKey
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrg0Proc
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateRecvNoDataProc
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateSendFrame
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateTransEndProc
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateCodeDwlProc
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateTransEndProc
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateCodeDwlProc
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSendDataProc
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSendDataUnColibarate
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSendFrame
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidTransformTx
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsUsartTrsQueue
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrSendSetYkqIdCodeInterface
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrSendSearchYkqCodeInterface
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrSendCalibrateCodeInterface
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryVoltageMidProc
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanKey_task
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSetupToWl
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateSendPrgData
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSetDataLimitlessSendEnd
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Task
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_task
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceActionKeyUpPro
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceActionKeyDownPro
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearUpdateMainMethod
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceDecDownloadRemainTimer
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetDownloadRemainTimer
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceInsertNote
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetActionIDByKey
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionKeyValueTurnAround
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logic_task
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateSendPrg
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidCXBRecvPrgProc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidCXBRecvWLPrgProc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidRecvWLPrgProc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransWLPrgProc
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusActionInfoReqProc
</UL>

<P><STRONG><a name="[14b]"></a>OS_CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeSet
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeGet
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyResume
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspendIf0
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameGet
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDelReq
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemQuery
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPendAbort
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemDel
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemAccept
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexQuery
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexAccept
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPendGetFlagsRdy
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameSet
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagNameGet
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameSet
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSEventNameGet
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendResponseData
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_GetFrame
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidStrobe
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRxMode
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFTxSendPacket
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_GetFrame
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setColiScNumStatus
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcceptKey
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrg0Proc
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateRecvNoDataProc
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateSendFrame
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateTransEndProc
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateCodeDwlProc
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateTransEndProc
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateCodeDwlProc
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSendDataProc
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSendDataUnColibarate
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSendFrame
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidTransformTx
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsUsartTrsQueue
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrSendSetYkqIdCodeInterface
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrSendSearchYkqCodeInterface
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrSendCalibrateCodeInterface
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryVoltageMidProc
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanKey_task
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSetupToWl
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateSendPrgData
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSetDataLimitlessSendEnd
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Task
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_task
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceActionKeyUpPro
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceActionKeyDownPro
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearUpdateMainMethod
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceDecDownloadRemainTimer
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetDownloadRemainTimer
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceInsertNote
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetActionIDByKey
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionKeyValueTurnAround
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logic_task
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateSendPrg
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidCXBRecvPrgProc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidCXBRecvWLPrgProc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidRecvWLPrgProc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransWLPrgProc
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusActionInfoReqProc
</UL>

<P><STRONG><a name="[160]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[166]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[15e]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[b1]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[19b]"></a>BSP_Init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BSP_Init &rArr; SystemInit &rArr; SetSysClock &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputData
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a0]"></a>SysTick_Init</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, bsp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SysTick_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPMng_Task
</UL>

<P><STRONG><a name="[1a1]"></a>Driver_Init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Driver_Init &rArr; RFID_Init &rArr; RFID_HarewreInit &rArr; RfidConfig &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZZZ_Init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WlUsartInit
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Int_Init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRecvSemCreate
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PwrPinInint
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledInit
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NcIoInit
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedInit
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedInit
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInit
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrUsartInit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrSendTIMConfig
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputInit
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromInint
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcInit
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b2]"></a>InputAdcInit</STRONG> (Thumb, 390 bytes, Stack size 88 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = InputAdcInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ITConfig
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMARequestAfterLastTransferCmd
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConv
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TempSensorVrefintCmd
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CommonInit
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSICmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcInit
</UL>

<P><STRONG><a name="[1a4]"></a>AdcInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = AdcInit &rArr; InputAdcInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputAdcInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[2b6]"></a>GetAdcAverageValue</STRONG> (Thumb, 236 bytes, Stack size 12 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetAdcAverageValue
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryInit
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryVoltageProc
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryChongdianPinProc
</UL>

<P><STRONG><a name="[c5]"></a>ADC1_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = ADC1_IRQHandler &rArr; InputAdcInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearFlag
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputAdcInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c7]"></a>OledSendData</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, oled.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledWriteData
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledWriteCommand
</UL>

<P><STRONG><a name="[1c5]"></a>OledWriteCommand</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OledWriteCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowChar_Special
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowChar_ASCII16b
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowChar_HZ16b
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdAreaClr
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClr
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledShutOn
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledShutDown
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledContrastAdj
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledInit
</UL>

<P><STRONG><a name="[1c9]"></a>OledWriteData</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OledWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowChar_Special
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowChar_ASCII16b
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowChar_HZ16b
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdAreaClr
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClr
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledInit
</UL>

<P><STRONG><a name="[1ca]"></a>OledContrastAdj</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OledContrastAdj &rArr; OledWriteCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicSetOledScrLightProc
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicResumeDefaultParamProc
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScrProtected
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScrClosed
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScrAwake
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_Init
</UL>

<P><STRONG><a name="[1cc]"></a>OledLowLevelInit</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = OledLowLevelInit &rArr; DelayUs &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledInit
</UL>

<P><STRONG><a name="[1a3]"></a>OledInit</STRONG> (Thumb, 334 bytes, Stack size 16 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = OledInit &rArr; OledLowLevelInit &rArr; DelayUs &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledLowLevelInit
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledWriteData
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[1cd]"></a>OledShutDown</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OledShutDown &rArr; OledWriteCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicShutdownProc
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScrProtected
</UL>

<P><STRONG><a name="[1ce]"></a>OledShutOn</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OledShutOn &rArr; OledWriteCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScrAwake
</UL>

<P><STRONG><a name="[1cf]"></a>LcdClr</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LcdClr &rArr; OledWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledWriteData
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrg0Proc
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapLcdClear
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPwdInput
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParEditIngProc
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputInt
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenu
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceTaskStartProc
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainInchargeDisplayCtrl
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainAll
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScrClosed
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidRecvWLPrgProc
</UL>

<P><STRONG><a name="[1d0]"></a>LcdAreaClr</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LcdAreaClr &rArr; OledWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledWriteData
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrg0Proc
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionInfoSynchroTransEndProc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateTransEndProc
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateTransEndProc
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputSelItem
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputInt
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputFloat
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuItem
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainTransRecvPrgCtrl
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScGrpCtrl
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScNearCtrl
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScSelfCtrl
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScUncertifiedCtrl
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScSet
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainCtrlMode
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainYkqId
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainNoteDirectly
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainNote
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainScColibrate
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainRfid
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainBattery
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainAll
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusUsartTransWLPrgProc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransWLPrgProc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrgProc
</UL>

<P><STRONG><a name="[1d1]"></a>ShowChar_HZ16b</STRONG> (Thumb, 256 bytes, Stack size 72 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapReadBuf
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledWriteData
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowStr16b
</UL>

<P><STRONG><a name="[1d3]"></a>ShowChar_ASCII16b</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ShowChar_ASCII16b &rArr; OledWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledWriteData
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowStr16b
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPwdInput
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputInt
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowParEdit
</UL>

<P><STRONG><a name="[1d4]"></a>ShowStr16b</STRONG> (Thumb, 222 bytes, Stack size 56 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowChar_ASCII16b
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowChar_HZ16b
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrg0Proc
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionInfoSynchroTransEndProc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateTransEndProc
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateTransEndProc
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapShowStr
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPwdInput
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputSelItem
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParEditSelGlobalProc
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParEditIngProc
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputInt
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputFloat
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenu
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuItem
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceTaskStartProc
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainTransRecvPrgCtrl
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainInchargeDisplayCtrl
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScGrpCtrl
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScNearCtrl
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScSelfCtrl
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScUncertifiedCtrl
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScSet
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainCtrlMode
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainYkqId
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainNoteDirectly
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainNote
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainScColibrate
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainRfid
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainAll
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScNeighborControlProc
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScSelfControlProc
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScUncertifiedProc
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeIdleProc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidRecvWLPrgProc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusUsartTransWLPrgProc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransWLPrgProc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrgProc
</UL>

<P><STRONG><a name="[1d6]"></a>ShowChar_Special</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ShowChar_Special &rArr; OledWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledWriteData
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainInchargeDisplayCtrl
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainRfid
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainBattery
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainAll
</UL>

<P><STRONG><a name="[1a2]"></a>PwrPinInint</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, pwr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PwrPinInint &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[1a6]"></a>LedInit</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LedInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[1d7]"></a>StateLed</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StateLed
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrg0Proc
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionInfoSynchroTransEndProc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateTransEndProc
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateCodeDwlProc
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateTransEndProc
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateCodeDwlProc
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrRecvDataProc
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicShutdownProc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_task
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceTaskStartProc
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfacePeriodicProc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGrpActionStartPro
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceShiftKeyLongDownPro
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainScUnColibrate
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeWLUnConnectProc
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeSelfRecvTransPrgProc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScGrpControlProc
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScNeighborControlProc
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScSelfControlProc
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScUncertifiedProc
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScSetProc
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeIdleProc
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicPeriodSampleProc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidCXBRecvPrgProc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidCXBRecvWLPrgProc
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusUnconnectWLProc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidRecvWLPrgProc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusUsartTransWLPrgProc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransWLPrgProc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrgProc
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusIrColibSuccessdProc
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusActionInfoReqProc
</UL>

<P><STRONG><a name="[1d8]"></a>LedToggle</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LedToggle
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateSendDataProc
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionInfoSynchroTransEndProc
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionInfoSynchroCodeWriteProc
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionInfoSynchroCodeDwlProc
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionInfoSynchroVersionWriteProc
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionInfoSynchroVersionDwlProc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateTransEndProc
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateCodeWriteProc
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateCodeDwlProc
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateVersionWriteProc
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateVersionDwlProc
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateTransEndProc
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateCodeWriteProc
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateCodeDwlProc
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateVersionWriteProc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateVersionDwlProc
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicPeriodSampleProc
</UL>

<P><STRONG><a name="[1a5]"></a>KeyInit</STRONG> (Thumb, 478 bytes, Stack size 16 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = KeyInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[1e4]"></a>KeyCorrespendLed</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = KeyCorrespendLed
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScanProc
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScGrpKeyLedProc
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScZibaoKeyLedProc
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScSelfKeyLedProc
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScUncertifiedKeyLedProc
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowSelfSetKeyLedProc
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScSetKeyLedProc
</UL>

<P><STRONG><a name="[1d9]"></a>IsMenuLeftOrMenuQ</STRONG> (Thumb, 370 bytes, Stack size 16 bytes, key.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetCtrlMode
</UL>

<P><STRONG><a name="[1db]"></a>AcceptKey</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = AcceptKey &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setColiScNumStatus
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getColiScNumStatus
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_Btnkey_D
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyIsValid
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScanProc
</UL>

<P><STRONG><a name="[1e0]"></a>GetKey</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GetKey
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyEmpty
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_task
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeIdleProc
</UL>

<P><STRONG><a name="[418]"></a>InquireKey</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, key.o(.text), UNUSED)

<P><STRONG><a name="[29b]"></a>GetKeyNum</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, key.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_task
</UL>

<P><STRONG><a name="[1e1]"></a>KeyEmpty</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, key.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
</UL>

<P><STRONG><a name="[1e2]"></a>KeyScanProc</STRONG> (Thumb, 1460 bytes, Stack size 32 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = KeyScanProc &rArr; AcceptKey &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedOnOff
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetCtrlMode
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcceptKey
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCorrespendLed
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyIsValid
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanKey_task
</UL>

<P><STRONG><a name="[1a7]"></a>KeyLedInit</STRONG> (Thumb, 392 bytes, Stack size 32 bytes, keyled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = KeyLedInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InternalClockConfig
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[1ef]"></a>KeyLed111</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, keyled.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyLed_Btokey_DLed
</UL>

<P><STRONG><a name="[1e5]"></a>KeyLedOnOff</STRONG> (Thumb, 150 bytes, Stack size 12 bytes, keyled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = KeyLedOnOff
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScanProc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrg0Proc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateTransEndProc
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateTransEndProc
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicShutdownProc
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceTaskStartProc
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfacePeriodicProc
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceStopKeyLongDownPro
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceShiftKeyLongDownPro
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowOnlineUpdateKeyLedProc
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScGrpKeyLedProc
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScZibaoKeyLedProc
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScSelfKeyLedProc
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScUncertifiedKeyLedProc
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowSelfSetKeyLedProc
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScSetKeyLedProc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainScUnColibrate
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeWLUnConnectProc
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScNeighborControlProc
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScSelfControlProc
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScUncertifiedProc
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScSetProc
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeIdleProc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidCXBRecvPrgProc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidCXBRecvWLPrgProc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidRecvWLPrgProc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusUsartTransWLPrgProc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransWLPrgProc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrgProc
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusActionInfoReqProc
</UL>

<P><STRONG><a name="[1f1]"></a>KeyLedToggle</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, keyled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = KeyLedToggle &rArr; keyLed_Btokey_DLed
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keyLed_Btokey_DLed
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetCtrlMode
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScGrpKeyLedProc
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScZibaoKeyLedProc
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScSelfKeyLedProc
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScUncertifiedKeyLedProc
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowSelfSetKeyLedProc
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScSetKeyLedProc
</UL>

<P><STRONG><a name="[1f3]"></a>KeyLedScan</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, keyled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = KeyLedScan &rArr; LedShift_595 &rArr; SH_CP_595
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedShift_595
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST_CP_595
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[e1]"></a>TIM5_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, keyled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = TIM5_IRQHandler &rArr; KeyLedScan &rArr; LedShift_595 &rArr; SH_CP_595
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedScan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f7]"></a>IrUsartParamInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IrUsartParamInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrUsartInit
</UL>

<P><STRONG><a name="[1ab]"></a>IrUsartInit</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = IrUsartInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrUsartParamInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[2c5]"></a>IrUsartReadRxBuf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrRecvDataProc
</UL>

<P><STRONG><a name="[2c1]"></a>IrUsartRxBufSizeGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrRecvDataProc
</UL>

<P><STRONG><a name="[2c2]"></a>IrUsartRxRdRtrGet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrMngIdleRecvDataProc
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrRecvDataProc
</UL>

<P><STRONG><a name="[2c4]"></a>IrUsartRxRdRtrSet</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrMngIdleRecvDataProc
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrRecvDataProc
</UL>

<P><STRONG><a name="[2c3]"></a>IrUsartRxWtrRtrGet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrMngIdleRecvDataProc
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrRecvDataProc
</UL>

<P><STRONG><a name="[d8]"></a>USART1_IRQHandler</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = USART1_IRQHandler &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[1aa]"></a>IrSendTIMConfig</STRONG> (Thumb, 416 bytes, Stack size 48 bytes, ir_send.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = IrSendTIMConfig &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[d0]"></a>TIM3_IRQHandler</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, ir_send.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = TIM3_IRQHandler &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture2
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxCmd
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>TIM2_IRQHandler</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, ir_send.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = TIM2_IRQHandler &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture3
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxCmd
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[209]"></a>IrSendInsertTxBuf</STRONG> (Thumb, 360 bytes, Stack size 40 bytes, ir_send.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = IrSendInsertTxBuf &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxCmd
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrMngSendDataProc
</UL>

<P><STRONG><a name="[20a]"></a>IrLOCSendInsertTxBuf</STRONG> (Thumb, 326 bytes, Stack size 40 bytes, ir_send.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = IrLOCSendInsertTxBuf &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxCmd
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrMng_Task
</UL>

<P><STRONG><a name="[1a8]"></a>InputInit</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, input.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = InputInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[20b]"></a>InputGetValue</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, input.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InputGetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryVoltageInintProc
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryChongdianPinProc
</UL>

<P><STRONG><a name="[1ae]"></a>RFID_Init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, rfid_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = RFID_Init &rArr; RFID_HarewreInit &rArr; RfidConfig &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_HarewreInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrg0Proc
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateRecvNoDataProc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateTransEndProc
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateCodeDwlProc
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateTransEndProc
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateCodeDwlProc
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfacePeriodicProc
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeSelfRecvTransPrgProc
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeIdleProc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidCXBRecvPrgProc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidCXBRecvWLPrgProc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidRecvWLPrgProc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransWLPrgProc
</UL>

<P><STRONG><a name="[20d]"></a>RFID_ShutDown</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rfid_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFChipSleep
</UL>

<P><STRONG><a name="[2ca]"></a>RFID_RcvIntTransMsgRegister</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rfid_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSetRecvCallBack
</UL>

<P><STRONG><a name="[20f]"></a>RFID_FetchData</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rfid_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = RFID_FetchData &rArr; RFID_GetFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_GetFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateRecvDataProc
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRecvInvalidDataProc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRecvDataProc
</UL>

<P><STRONG><a name="[211]"></a>RFID_SendData</STRONG> (Thumb, 72 bytes, Stack size 96 bytes, rfid_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = RFID_SendData &rArr; RFTxSendPacket &rArr; SetRFChipIdle &rArr; RFID_HarewreInit &rArr; RfidConfig &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRxMode
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFTxSendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateSendFrame
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSendFrame
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateSendPrg
</UL>

<P><STRONG><a name="[214]"></a>SetRfidSIDLE</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rfid_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCtrlSetIDLE
</UL>

<P><STRONG><a name="[216]"></a>SetRfidSRX</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rfid_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = SetRfidSRX &rArr; SetRxMode &rArr; RfidRxRegInit &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRxMode
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateRecvNoDataProc
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSendDataProc
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRecvInvalidDataProc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRecvDataProc
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngInint
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateMngInint
</UL>

<P><STRONG><a name="[217]"></a>SetLocalAddress</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rfid_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SetLocalAddress &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidWriteReg
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_HarewreInit
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicSetRfidSelfNumbProc
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicSetYkqNumbProc
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngInint
</UL>

<P><STRONG><a name="[21a]"></a>GetRfidCurStatus</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rfid_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = GetRfidCurStatus &rArr; RfidGetTxStatus &rArr; RfidStrobe &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidGetTxStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateRecvNoDataProc
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSendDataProc
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRecvInvalidDataProc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRecvDataProc
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngInint
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateMngInint
</UL>

<P><STRONG><a name="[21c]"></a>GetRfidSendEnable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rfid_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidReadStatusReg
</UL>

<P><STRONG><a name="[219]"></a>DelayUs</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, rfid_cc1101.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFChipSleepMode
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFChipWOR
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidReadFifoProc
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFChipIdle
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidReadAllStatusReg
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidWORRegInit
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidChipReset
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiResetChipSingle
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidConfig
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRxRegInit
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidStrobe
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMcuRead
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMcuWrite
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFChipSleep
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFTxSendPacket
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCtrlSetIDLE
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLocalAddress
</UL>

<P><STRONG><a name="[21e]"></a>RFID_SPI_SendByte</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, rfid_cc1101.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RFID_SPI_SendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidStrobe
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMcuRead
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMcuWrite
</UL>

<P><STRONG><a name="[222]"></a>WaitGPIOReset</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rfid_cc1101.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidStrobe
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMcuRead
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMcuWrite
</UL>

<P><STRONG><a name="[223]"></a>RfidStrobe</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, rfid_cc1101.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = RfidStrobe &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitGPIOReset
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_SPI_SendByte
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFChipWOR
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidReadFifoProc
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFChipIdle
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidChipReset
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRxMode
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFChipSleep
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidGetTxStatus
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFTxSendPacket
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCtrlSetIDLE
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateRecvNoDataProc
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSendDataProc
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRecvInvalidDataProc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRecvDataProc
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngInint
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateMngInint
</UL>

<P><STRONG><a name="[225]"></a>RfidSpiWrite</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, rfid_cc1101.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMcuWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidWriteReg
</UL>

<P><STRONG><a name="[218]"></a>RfidWriteReg</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, rfid_cc1101.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSpiWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidWORRegInit
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidConfig
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRxRegInit
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRxMode
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFTxSendPacket
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_HarewreInit
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLocalAddress
</UL>

<P><STRONG><a name="[226]"></a>RfidRxRegInit</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, rfid_cc1101.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RfidRxRegInit &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidWriteReg
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRxMode
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFChipSleep
</UL>

<P><STRONG><a name="[213]"></a>SetRxMode</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rfid_cc1101.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = SetRxMode &rArr; RfidRxRegInit &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRxRegInit
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidStrobe
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidWriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidReadFifoProc
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_HarewreInit
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRfidSRX
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_SendData
</UL>

<P><STRONG><a name="[227]"></a>InitRfidIntIO</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, rfid_cc1101.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = InitRfidIntIO &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_HarewreInit
</UL>

<P><STRONG><a name="[22a]"></a>RfidConfig</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, rfid_cc1101.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RfidConfig &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidWriteReg
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_HarewreInit
</UL>

<P><STRONG><a name="[22b]"></a>SpiResetChipSingle</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, rfid_cc1101.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SpiResetChipSingle
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidChipReset
</UL>

<P><STRONG><a name="[22c]"></a>RfidChipReset</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rfid_cc1101.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = RfidChipReset &rArr; RfidStrobe &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiResetChipSingle
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidStrobe
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_HarewreInit
</UL>

<P><STRONG><a name="[22d]"></a>RFID_SpiInit</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, rfid_cc1101.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RFID_SpiInit &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_HarewreInit
</UL>

<P><STRONG><a name="[230]"></a>RFID_SpiPortInit</STRONG> (Thumb, 362 bytes, Stack size 16 bytes, rfid_cc1101.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RFID_SpiPortInit &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_HarewreInit
</UL>

<P><STRONG><a name="[20c]"></a>RFID_HarewreInit</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, rfid_cc1101.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = RFID_HarewreInit &rArr; RfidConfig &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_SpiPortInit
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_SpiInit
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidChipReset
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidConfig
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRfidIntIO
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRxMode
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidWriteReg
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLocalAddress
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFChipIdle
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_Init
</UL>

<P><STRONG><a name="[231]"></a>RfidWORRegInit</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, rfid_cc1101.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RfidWORRegInit &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidWriteReg
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFChipWOR
</UL>

<P><STRONG><a name="[21d]"></a>RfidReadStatusReg</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, rfid_cc1101.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RfidReadStatusReg &rArr; SpiMcuRead &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMcuRead
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidReadAllStatusReg
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFTxSendPacket
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCtrlSetIDLE
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRfidSendEnable
</UL>

<P><STRONG><a name="[233]"></a>RfidReadAllStatusReg</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rfid_cc1101.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidReadStatusReg
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>

<P><STRONG><a name="[234]"></a>RfidWriteFifo</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rfid_cc1101.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RfidWriteFifo &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMcuWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFTxSendPacket
</UL>

<P><STRONG><a name="[235]"></a>RfidReadFifo</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, rfid_cc1101.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RfidReadFifo &rArr; SpiMcuRead &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMcuRead
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidReadFifoProc
</UL>

<P><STRONG><a name="[215]"></a>RFCtrlSetIDLE</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rfid_cc1101.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = RFCtrlSetIDLE &rArr; RfidReadStatusReg &rArr; SpiMcuRead &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidStrobe
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidReadStatusReg
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFChipIdle
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRfidSIDLE
</UL>

<P><STRONG><a name="[236]"></a>SetRFChipIdle</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, rfid_cc1101.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = SetRFChipIdle &rArr; RFID_HarewreInit &rArr; RfidConfig &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidStrobe
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_HarewreInit
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFCtrlSetIDLE
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFTxSendPacket
</UL>

<P><STRONG><a name="[212]"></a>RFTxSendPacket</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, rfid_cc1101.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = RFTxSendPacket &rArr; SetRFChipIdle &rArr; RFID_HarewreInit &rArr; RfidConfig &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFChipIdle
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidWriteFifo
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidStrobe
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidWriteReg
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidReadStatusReg
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_SendData
</UL>

<P><STRONG><a name="[237]"></a>RfidReadFifoProc</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, rfid_cc1101.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = RfidReadFifoProc &rArr; SetRxMode &rArr; RfidRxRegInit &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidReadFifo
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidStrobe
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRxMode
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[21b]"></a>RfidGetTxStatus</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rfid_cc1101.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = RfidGetTxStatus &rArr; RfidStrobe &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidStrobe
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRfidCurStatus
</UL>

<P><STRONG><a name="[20e]"></a>SetRFChipSleep</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rfid_cc1101.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = SetRFChipSleep &rArr; RfidRxRegInit &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRxRegInit
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidStrobe
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFChipSleepMode
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_ShutDown
</UL>

<P><STRONG><a name="[238]"></a>SetRFChipWOR</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rfid_cc1101.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = SetRFChipWOR &rArr; RfidWORRegInit &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidWORRegInit
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidStrobe
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFChipSleepMode
</UL>

<P><STRONG><a name="[239]"></a>SetRFChipSleepMode</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rfid_cc1101.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = SetRFChipSleepMode &rArr; SetRFChipWOR &rArr; RfidWORRegInit &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFChipWOR
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFChipSleep
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSendDataProc
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRecvInvalidDataProc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRecvDataProc
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngInint
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicShutdownProc
</UL>

<P><STRONG><a name="[210]"></a>RFID_GetFrame</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, rfid_cc1101.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = RFID_GetFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_FetchData
</UL>

<P><STRONG><a name="[ca]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 228 bytes, Stack size 88 bytes, rfid_cc1101.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = EXTI9_5_IRQHandler &rArr; RfidReadFifoProc &rArr; SetRxMode &rArr; RfidRxRegInit &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetFlagStatus
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidReadFifoProc
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[1af]"></a>EepromInint</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eepromarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = EepromInint &rArr; OSMutexCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[23d]"></a>EepromReadBytes</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, eepromarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = EepromReadBytes &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicGetBatterInchargeTimerProc
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicGetBatterVoltageBackupProc
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicGetBatteryColDataBackupProc
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicGetBatteryAcrBackupProc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicGetShutDownFlagProc
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamInint
</UL>

<P><STRONG><a name="[23e]"></a>EepromReadWords</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, eepromarm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
</UL>

<P><STRONG><a name="[23f]"></a>EepromWriteBytes</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, eepromarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = EepromWriteBytes &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramWord
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_FastProgramByte
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_Lock
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_Unlock
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicSetBatterInchargeTimerProc
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicSetBatterVoltageBackupProc
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicSetBatteryColDataBackupProc
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicSetBatteryAcrBackupProc
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicSetShutDownFlagProc
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicGetShutDownFlagProc
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamSaveProc
</UL>

<P><STRONG><a name="[242]"></a>EepromWriteWords</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, eepromarm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_ProgramWord
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_Lock
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DATA_EEPROM_Unlock
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPend
</UL>

<P><STRONG><a name="[1b0]"></a>NcIoInit</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ncio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = NcIoInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[2cd]"></a>Crc16UsartSendChick</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Crc16UsartSendChick
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendResponseData
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionInfoSynchroTransEndProc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateTransEndProc
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsUsartTrsQueue
</UL>

<P><STRONG><a name="[246]"></a>Crc16UsartReceiveChick</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Crc16UsartReceiveChick
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[243]"></a>Usart_GetFrame</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Usart_GetFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartRecvInvalidDataProc
</UL>

<P><STRONG><a name="[1ac]"></a>WlUsartInit</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = WlUsartInit &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[da]"></a>USART3_IRQHandler</STRONG> (Thumb, 372 bytes, Stack size 8 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = USART3_IRQHandler &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[d1]"></a>TIM4_IRQHandler</STRONG> (Thumb, 492 bytes, Stack size 16 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = TIM4_IRQHandler &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendResponseData
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc16UsartReceiveChick
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[1ad]"></a>TIM4_Int_Init</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM4_Int_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[248]"></a>ReadActionInfo</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ReadActionInfo &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapReadBuf
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionInfoInit
</UL>

<P><STRONG><a name="[249]"></a>WriteActionInfo</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = WriteActionInfo &rArr; IapWriteBuf &rArr; InFlashWriteBuf &rArr; FLASH_FastProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapReadBuf
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapWriteBuf
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapEraserSector
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionInfoSynchroTransEndProc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateTransEndProc
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionInfoInit
</UL>

<P><STRONG><a name="[24f]"></a>ActionInfoInit</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ActionInfoInit &rArr; WriteActionInfo &rArr; IapWriteBuf &rArr; InFlashWriteBuf &rArr; FLASH_FastProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapReadBuf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteActionInfo
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadActionInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_task
</UL>

<P><STRONG><a name="[250]"></a>ActionKeyValueTurnAround</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = ActionKeyValueTurnAround
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceActionKeyUpPro
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceActionKeyDownPro
</UL>

<P><STRONG><a name="[252]"></a>ActionKeyValueTurnBackToLED</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ActionKeyValueTurnBackToLED
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetKeyLedDefaultValue
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetKeyLedValue
</UL>

<P><STRONG><a name="[251]"></a>InterfaceGetKeyLedValue</STRONG> (Thumb, 448 bytes, Stack size 48 bytes, interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionKeyValueTurnBackToLED
</UL>

<P><STRONG><a name="[253]"></a>GetActionIDByKey</STRONG> (Thumb, 398 bytes, Stack size 24 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = GetActionIDByKey &rArr; LogicParamApi
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceActionKeyUpPro
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceActionKeyDownPro
</UL>

<P><STRONG><a name="[255]"></a>GetActionInfoByID</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetActionInfoByID
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyGrpCtrlPro
</UL>

<P><STRONG><a name="[1dd]"></a>getColiScNumStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcceptKey
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSendDataProc
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRecvWaitTimeoutProc
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScNeighborControlProc
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScSelfControlProc
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScUncertifiedProc
</UL>

<P><STRONG><a name="[1de]"></a>setColiScNumStatus</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = setColiScNumStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcceptKey
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScNeighborControlProc
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScSelfControlProc
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScUncertifiedProc
</UL>

<P><STRONG><a name="[256]"></a>Interface_Init</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = Interface_Init &rArr; LogicParamApi
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledContrastAdj
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPMng_Task
</UL>

<P><STRONG><a name="[257]"></a>InterfaceTakeOutReverseKey</STRONG> (Thumb, 590 bytes, Stack size 40 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = InterfaceTakeOutReverseKey &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetKeyRfidDataShowName
</UL>

<P><STRONG><a name="[259]"></a>InterfaceGetKeyRfidDataShowName</STRONG> (Thumb, 902 bytes, Stack size 64 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = InterfaceGetKeyRfidDataShowName &rArr; InterfaceTakeOutReverseKey &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceTakeOutReverseKey
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScSelfControlProc
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScSetProc
</UL>

<P><STRONG><a name="[25a]"></a>InterfaceGetKeyLedDefaultValue</STRONG> (Thumb, 740 bytes, Stack size 40 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = InterfaceGetKeyLedDefaultValue &rArr; LogicParamApi
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionKeyValueTurnBackToLED
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScGrpKeyLedProc
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScSelfKeyLedProc
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScUncertifiedKeyLedProc
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowSelfSetKeyLedProc
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScSetKeyLedProc
</UL>

<P><STRONG><a name="[25b]"></a>SetScrAwake</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = SetScrAwake &rArr; LogicParamApi
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledShutOn
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledContrastAdj
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMain
</UL>

<P><STRONG><a name="[25c]"></a>SetScrClosed</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetScrClosed &rArr; LcdClr &rArr; OledWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClr
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledContrastAdj
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicShutdownProc
</UL>

<P><STRONG><a name="[25d]"></a>SetScrProtected</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = SetScrProtected &rArr; LogicParamApi
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledShutDown
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledContrastAdj
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMain
</UL>

<P><STRONG><a name="[25e]"></a>InterfaceInsertNote</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = InterfaceInsertNote
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrg0Proc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateTransEndProc
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateCodeDwlProc
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateTransEndProc
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateCodeDwlProc
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRecvInvalidDataProc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRecvDataProc
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartBeatCommErrTimer
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_task
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceTaskStartProc
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfacePeriodicProc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGrpActionStartPro
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceStopKeyLongDownPro
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceShiftKeyLongDownPro
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceActionKeyUpPro
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceActionKeyDownPro
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyShuntDownPro
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyGrpCtrlPro
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyNeighborPro
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyCertifyPro
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeActionInfoSyn
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeWLUnConnectProc
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeSelfRecvTransPrgProc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScGrpControlProc
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScNeighborControlProc
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScSelfControlProc
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScUncertifiedProc
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScSetProc
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeSelfSetProc
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeIdleProc
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicPeriodSampleProc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidCXBRecvPrgProc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidCXBRecvWLPrgProc
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusUnconnectWLProc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidRecvWLPrgProc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusUsartTransWLPrgProc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransWLPrgProc
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusActionInfoReqProc
</UL>

<P><STRONG><a name="[260]"></a>InterfaceSetCtrlMode</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = InterfaceSetCtrlMode &rArr; LogicParamApi
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrg0Proc
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionInfoSynchroCodeWriteProc
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionInfoSynchroCodeDwlProc
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionInfoSynchroVersionWriteProc
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionInfoSynchroVersionDwlProc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateTransEndProc
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateCodeWriteProc
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateCodeDwlProc
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateVersionWriteProc
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateVersionDwlProc
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateTransEndProc
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateCodeWriteProc
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateCodeDwlProc
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateVersionWriteProc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateVersionDwlProc
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRecvInvalidDataProc
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRecvWaitTimeoutProc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRecvDataProc
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrMngSendDataProc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_task
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceTaskStartProc
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfacePeriodicProc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGrpActionStartPro
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceShiftKeyLongDownPro
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyShuntDownPro
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyGrpCtrlPro
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyNeighborPro
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyCertifyPro
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainScUnColibrate
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeWLUnConnectProc
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeSelfRecvTransPrgProc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScGrpControlProc
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScNeighborControlProc
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScSelfControlProc
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScUncertifiedProc
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScSetProc
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeSelfSetProc
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeIdleProc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidCXBRecvPrgProc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidCXBRecvWLPrgProc
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusUnconnectWLProc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidRecvWLPrgProc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusUsartTransWLPrgProc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransWLPrgProc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrgProc
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusActionInfoReqProc
</UL>

<P><STRONG><a name="[1da]"></a>InterfaceGetCtrlMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedToggle
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScanProc
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsMenuLeftOrMenuQ
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateRecvDataProc
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionInfoSynchroTransEndProc
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionInfoSynchroCodeWriteProc
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionInfoSynchroCodeDwlProc
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionInfoSynchroVersionWriteProc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateTransEndProc
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateCodeWriteProc
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateCodeDwlProc
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateVersionWriteProc
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateVersionDwlProc
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateTransEndProc
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateCodeWriteProc
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateCodeDwlProc
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateVersionWriteProc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateVersionDwlProc
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRecvInvalidDataProc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRecvDataProc
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicShutdownProc
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfacePeriodicProc
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyCertifyPro
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScGrpKeyLedProc
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScSelfKeyLedProc
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScUncertifiedKeyLedProc
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowSelfSetKeyLedProc
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScSetKeyLedProc
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainCtrlMode
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainRfid
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeSelfRecvTransPrgProc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScGrpControlProc
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScNeighborControlProc
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScSelfControlProc
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScUncertifiedProc
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScSetProc
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeIdleProc
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRfidTestShow
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicPeriodSampleProc
</UL>

<P><STRONG><a name="[261]"></a>InterfaceSetDownloadRemainTimer</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = InterfaceSetDownloadRemainTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrg0Proc
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionInfoSynchroTransEndProc
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionInfoSynchroVersionDwlProc
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateVersionDwlProc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateVersionDwlProc
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeIdleProc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidCXBRecvPrgProc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidCXBRecvWLPrgProc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidRecvWLPrgProc
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusActionInfoReqProc
</UL>

<P><STRONG><a name="[262]"></a>InterfaceDecDownloadRemainTimer</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = InterfaceDecDownloadRemainTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionInfoSynchroCodeWriteProc
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionInfoSynchroCodeDwlProc
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionInfoSynchroVersionWriteProc
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionInfoSynchroVersionDwlProc
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateCodeWriteProc
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateCodeDwlProc
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateVersionWriteProc
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateVersionDwlProc
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateCodeWriteProc
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateCodeDwlProc
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateVersionWriteProc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateVersionDwlProc
</UL>

<P><STRONG><a name="[268]"></a>FormatRemainTimer</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FormatRemainTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainTransRecvPrgCtrl
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainAll
</UL>

<P><STRONG><a name="[263]"></a>InterfaceSetUpdateMainMethod</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = InterfaceSetUpdateMainMethod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrg0Proc
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateRecvDataProc
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionInfoSynchroVersionDwlProc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateTransEndProc
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateCodeDwlProc
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateVersionDwlProc
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateTransEndProc
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateCodeDwlProc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateVersionDwlProc
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRecvInvalidDataProc
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRecvWaitTimeoutProc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRecvDataProc
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartBeatCommErrTimer
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_task
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceTaskStartProc
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfacePeriodicProc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGrpActionStartPro
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceStopKeyLongDownPro
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceShiftKeyLongDownPro
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceActionKeyUpPro
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceActionKeyDownPro
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyShuntDownPro
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyGrpCtrlPro
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyNeighborPro
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyCertifyPro
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainScUnColibrate
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeActionInfoSyn
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeWLUnConnectProc
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeSelfRecvTransPrgProc
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeInchargeDisplayProc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScGrpControlProc
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScNeighborControlProc
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScSelfControlProc
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScUncertifiedProc
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScSetProc
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeSelfSetProc
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeIdleProc
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRfidTestShow
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicPeriodSampleProc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidCXBRecvPrgProc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidCXBRecvWLPrgProc
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusUnconnectWLProc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidRecvWLPrgProc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusUsartTransWLPrgProc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransWLPrgProc
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusActionInfoReqProc
</UL>

<P><STRONG><a name="[264]"></a>ClearUpdateMainMethod</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = ClearUpdateMainMethod
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfacePeriodicProc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGrpActionStartPro
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyShuntDownPro
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyCertifyPro
</UL>

<P><STRONG><a name="[265]"></a>ShowMainAll</STRONG> (Thumb, 3094 bytes, Stack size 72 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = ShowMainAll &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowChar_Special
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowStr16b
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdAreaClr
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClr
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatRemainTimer
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMain
</UL>

<P><STRONG><a name="[269]"></a>ShowMainBattery</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = ShowMainBattery &rArr; LcdAreaClr &rArr; OledWriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowChar_Special
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdAreaClr
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMain
</UL>

<P><STRONG><a name="[26a]"></a>ShowMainRfid</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = ShowMainRfid &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetCtrlMode
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowChar_Special
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowStr16b
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdAreaClr
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMain
</UL>

<P><STRONG><a name="[26b]"></a>ShowMainScColibrate</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = ShowMainScColibrate &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowStr16b
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdAreaClr
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMain
</UL>

<P><STRONG><a name="[26c]"></a>ShowMainScUnColibrate</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = ShowMainScUnColibrate &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedOnOff
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateLed
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSetDataLimitlessSendEnd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidGetDataLimitlessSendFlag
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMain
</UL>

<P><STRONG><a name="[26f]"></a>ShowMainNote</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = ShowMainNote &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowStr16b
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdAreaClr
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMain
</UL>

<P><STRONG><a name="[270]"></a>ShowMainNoteDirectly</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowStr16b
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdAreaClr
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[271]"></a>ShowMainYkqId</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = ShowMainYkqId &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowStr16b
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdAreaClr
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMain
</UL>

<P><STRONG><a name="[272]"></a>ShowMainCtrlMode</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = ShowMainCtrlMode &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetCtrlMode
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowStr16b
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdAreaClr
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMain
</UL>

<P><STRONG><a name="[273]"></a>ShowScSet</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = ShowScSet &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowStr16b
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdAreaClr
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMain
</UL>

<P><STRONG><a name="[274]"></a>ShowScUncertifiedCtrl</STRONG> (Thumb, 390 bytes, Stack size 48 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = ShowScUncertifiedCtrl &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowStr16b
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdAreaClr
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMain
</UL>

<P><STRONG><a name="[275]"></a>ShowScSelfCtrl</STRONG> (Thumb, 516 bytes, Stack size 48 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204 + Unknown Stack Size
<LI>Call Chain = ShowScSelfCtrl &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowStr16b
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdAreaClr
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMain
</UL>

<P><STRONG><a name="[276]"></a>ShowScNearCtrl</STRONG> (Thumb, 552 bytes, Stack size 64 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = ShowScNearCtrl &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowStr16b
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdAreaClr
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMain
</UL>

<P><STRONG><a name="[277]"></a>ShowScGrpCtrl</STRONG> (Thumb, 1040 bytes, Stack size 64 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220 + Unknown Stack Size
<LI>Call Chain = ShowScGrpCtrl &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowStr16b
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdAreaClr
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMain
</UL>

<P><STRONG><a name="[278]"></a>ShowMainInchargeDisplayCtrl</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = ShowMainInchargeDisplayCtrl &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowChar_Special
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowStr16b
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClr
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMain
</UL>

<P><STRONG><a name="[279]"></a>ShowMainTransRecvPrgCtrl</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = ShowMainTransRecvPrgCtrl &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowStr16b
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdAreaClr
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FormatRemainTimer
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMain
</UL>

<P><STRONG><a name="[27a]"></a>ShowMain</STRONG> (Thumb, 546 bytes, Stack size 16 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244 + Unknown Stack Size
<LI>Call Chain = ShowMain &rArr; ShowMainAll &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainTransRecvPrgCtrl
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainInchargeDisplayCtrl
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScGrpCtrl
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScNearCtrl
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScSelfCtrl
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScUncertifiedCtrl
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScSet
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainCtrlMode
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainYkqId
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainNote
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainScUnColibrate
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainScColibrate
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainRfid
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainBattery
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainAll
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScrProtected
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScrAwake
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_task
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceTaskStartProc
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfacePeriodicProc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGrpActionStartPro
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceStopKeyLongDownPro
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceShiftKeyLongDownPro
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceActionKeyUpPro
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceActionKeyDownPro
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyShuntDownPro
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyGrpCtrlPro
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyNeighborPro
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyCertifyPro
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeActionInfoSyn
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeWLUnConnectProc
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeSelfRecvTransPrgProc
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeInchargeDisplayProc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScGrpControlProc
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScNeighborControlProc
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScSelfControlProc
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScUncertifiedProc
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScSetProc
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeSelfSetProc
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeIdleProc
</UL>

<P><STRONG><a name="[27b]"></a>ShowScSetKeyLedProc</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ShowScSetKeyLedProc &rArr; InterfaceGetKeyLedDefaultValue &rArr; LogicParamApi
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedToggle
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedOnOff
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetCtrlMode
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCorrespendLed
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetKeyLedDefaultValue
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScSetProc
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeIdleProc
</UL>

<P><STRONG><a name="[27c]"></a>ShowSelfSetKeyLedProc</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ShowSelfSetKeyLedProc &rArr; InterfaceGetKeyLedDefaultValue &rArr; LogicParamApi
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedToggle
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedOnOff
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetCtrlMode
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCorrespendLed
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetKeyLedDefaultValue
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeSelfSetProc
</UL>

<P><STRONG><a name="[27d]"></a>ShowScUncertifiedKeyLedProc</STRONG> (Thumb, 348 bytes, Stack size 32 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ShowScUncertifiedKeyLedProc &rArr; InterfaceGetKeyLedDefaultValue &rArr; LogicParamApi
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedToggle
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedOnOff
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetCtrlMode
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCorrespendLed
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetKeyLedDefaultValue
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfacePeriodicProc
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceActionKeyUpPro
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceActionKeyDownPro
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyShuntDownPro
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyNeighborPro
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyCertifyPro
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScGrpControlProc
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScNeighborControlProc
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScSelfControlProc
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScUncertifiedProc
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScSetProc
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeIdleProc
</UL>

<P><STRONG><a name="[27e]"></a>ShowScSelfKeyLedProc</STRONG> (Thumb, 446 bytes, Stack size 32 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ShowScSelfKeyLedProc &rArr; InterfaceGetKeyLedDefaultValue &rArr; LogicParamApi
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedToggle
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedOnOff
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetCtrlMode
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCorrespendLed
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetKeyLedDefaultValue
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceActionKeyUpPro
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyCertifyPro
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScGrpControlProc
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScNeighborControlProc
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScSelfControlProc
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScUncertifiedProc
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScSetProc
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeIdleProc
</UL>

<P><STRONG><a name="[27f]"></a>ShowScZibaoKeyLedProc</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, interface.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedToggle
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedOnOff
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCorrespendLed
</UL>

<P><STRONG><a name="[280]"></a>ShowScGrpKeyLedProc</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ShowScGrpKeyLedProc &rArr; InterfaceGetKeyLedDefaultValue &rArr; LogicParamApi
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedToggle
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedOnOff
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetCtrlMode
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyCorrespendLed
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetKeyLedDefaultValue
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyCertifyPro
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScGrpControlProc
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScSelfControlProc
</UL>

<P><STRONG><a name="[281]"></a>ShowOnlineUpdateKeyLedProc</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ShowOnlineUpdateKeyLedProc &rArr; KeyLedOnOff
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedOnOff
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeSelfRecvTransPrgProc
</UL>

<P><STRONG><a name="[287]"></a>ClearActionInfo</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ClearActionInfo &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGrpActionStartPro
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceActionKeyUpPro
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceActionKeyDownPro
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyShuntDownPro
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyCertifyPro
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScNeighborControlProc
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScUncertifiedProc
</UL>

<P><STRONG><a name="[288]"></a>InterfaceKeyCertifyPro</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = InterfaceKeyCertifyPro &rArr; ShowMain &rArr; ShowMainAll &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetCtrlMode
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearActionInfo
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScGrpKeyLedProc
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScSelfKeyLedProc
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScUncertifiedKeyLedProc
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMain
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearUpdateMainMethod
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceInsertNote
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScGrpControlProc
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScNeighborControlProc
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScSelfControlProc
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScUncertifiedProc
</UL>

<P><STRONG><a name="[289]"></a>InterfaceKeyNeighborPro</STRONG> (Thumb, 988 bytes, Stack size 64 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = InterfaceKeyNeighborPro &rArr; ShowMain &rArr; ShowMainAll &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSetDataLimitlessSendEnd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidGetDataLimitlessSendFlag
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScUncertifiedKeyLedProc
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMain
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceInsertNote
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScGrpControlProc
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScNeighborControlProc
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScUncertifiedProc
</UL>

<P><STRONG><a name="[28a]"></a>InterfaceKeyGrpCtrlPro</STRONG> (Thumb, 1066 bytes, Stack size 56 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = InterfaceKeyGrpCtrlPro &rArr; ShowMain &rArr; ShowMainAll &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMain
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceInsertNote
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetActionInfoByID
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScGrpControlProc
</UL>

<P><STRONG><a name="[28b]"></a>InterfaceKeyShuntDownPro</STRONG> (Thumb, 780 bytes, Stack size 48 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = InterfaceKeyShuntDownPro &rArr; ShowMain &rArr; ShowMainAll &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSetDataLimitlessSendEnd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidGetDataLimitlessSendFlag
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearActionInfo
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScUncertifiedKeyLedProc
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMain
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearUpdateMainMethod
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceInsertNote
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScGrpControlProc
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScNeighborControlProc
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScUncertifiedProc
</UL>

<P><STRONG><a name="[28c]"></a>InterfaceActionKeyDownPro</STRONG> (Thumb, 936 bytes, Stack size 120 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = InterfaceActionKeyDownPro &rArr; ShowMain &rArr; ShowMainAll &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSetDataLimitlessSendEnd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidGetDataLimitlessSendFlag
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearActionInfo
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScUncertifiedKeyLedProc
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMain
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceInsertNote
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetActionIDByKey
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionKeyValueTurnAround
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScGrpControlProc
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScNeighborControlProc
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScUncertifiedProc
</UL>

<P><STRONG><a name="[28f]"></a>InterfaceActionKeyUpPro</STRONG> (Thumb, 904 bytes, Stack size 88 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = InterfaceActionKeyUpPro &rArr; ShowMain &rArr; ShowMainAll &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSetDataLimitlessSendEnd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidGetDataLimitlessSendFlag
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearActionInfo
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScSelfKeyLedProc
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScUncertifiedKeyLedProc
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMain
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceInsertNote
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetActionIDByKey
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionKeyValueTurnAround
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScNeighborControlProc
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScUncertifiedProc
</UL>

<P><STRONG><a name="[290]"></a>InterfaceShiftKeyLongDownPro</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = InterfaceShiftKeyLongDownPro &rArr; ShowMain &rArr; ShowMainAll &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedOnOff
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateLed
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSetDataLimitlessSendEnd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidGetDataLimitlessSendFlag
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMain
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceInsertNote
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceStopKeyLongDownPro
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeActionInfoSyn
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScGrpControlProc
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScNeighborControlProc
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScUncertifiedProc
</UL>

<P><STRONG><a name="[291]"></a>InterfaceStopKeyLongDownPro</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = InterfaceStopKeyLongDownPro &rArr; InterfaceShiftKeyLongDownPro &rArr; ShowMain &rArr; ShowMainAll &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedOnOff
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceShiftKeyLongDownPro
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMain
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceInsertNote
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScGrpControlProc
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScNeighborControlProc
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScUncertifiedProc
</UL>

<P><STRONG><a name="[292]"></a>InterfaceGrpActionStartPro</STRONG> (Thumb, 730 bytes, Stack size 56 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = InterfaceGrpActionStartPro &rArr; ShowMain &rArr; ShowMainAll &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateLed
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSetDataLimitlessSendEnd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidGetDataLimitlessSendFlag
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearActionInfo
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMain
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearUpdateMainMethod
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceInsertNote
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScGrpControlProc
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScNeighborControlProc
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScUncertifiedProc
</UL>

<P><STRONG><a name="[294]"></a>InterfacePeriodicProc</STRONG> (Thumb, 1698 bytes, Stack size 40 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = InterfacePeriodicProc &rArr; ShowMain &rArr; ShowMainAll &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedOnOff
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetCtrlMode
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateLed
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapReadBuf
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_Init
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSetupToWl
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSetDataLimitlessSendEnd
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSetRecvCallBack
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidGetDataLimitlessSendFlag
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicShutdownProc
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapWriteBuf
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScUncertifiedKeyLedProc
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMain
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearUpdateMainMethod
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceInsertNote
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_task
</UL>

<P><STRONG><a name="[296]"></a>InterfaceTaskStartProc</STRONG> (Thumb, 1054 bytes, Stack size 48 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = InterfaceTaskStartProc &rArr; ShowMain &rArr; ShowMainAll &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_ClearFlag
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedOnOff
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateLed
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowStr16b
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClr
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicShutdownProc
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatterySetTotalAcr
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatterySetCoulomeData
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryGetVoltBackup
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMain
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceInsertNote
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_task
</UL>

<P><STRONG><a name="[f5]"></a>Interface_task</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = Interface_task &rArr; InterfaceTaskStartProc &rArr; ShowMain &rArr; ShowMainAll &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKeyNum
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateLed
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceTaskStartProc
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfacePeriodicProc
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMain
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceInsertNote
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionInfoInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[f6]"></a>ScanKey_task</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, keyapp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = ScanKey_task &rArr; KeyScanProc &rArr; AcceptKey &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScanProc
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[29c]"></a>IWDG_Configuration</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, iwdg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IWDG_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Task
</UL>

<P><STRONG><a name="[2a2]"></a>IWDG_SleepConfiguration</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, iwdg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IWDG_SleepConfiguration
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicShutdownProc
</UL>

<P><STRONG><a name="[24c]"></a>IWDG_Feed</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, iwdg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IWDG_Feed
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrg0Proc
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionInfoSynchroTransEndProc
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionInfoSynchroVersionDwlProc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateTransEndProc
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateVersionDwlProc
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateTransEndProc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateVersionDwlProc
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapExFlashCrc
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Task
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteActionInfo
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeSelfRecvTransPrgProc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidRecvWLPrgProc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrgProc
</UL>

<P><STRONG><a name="[f1]"></a>IWDG_Task</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, iwdg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = IWDG_Task &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Configuration
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.text)
</UL>
<P><STRONG><a name="[2b4]"></a>InputCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, interfacemenu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParEditIngProc
</UL>

<P><STRONG><a name="[2af]"></a>InputSelItem</STRONG> (Thumb, 452 bytes, Stack size 32 bytes, interfacemenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = InputSelItem &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowStr16b
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdAreaClr
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParEditIngProc
</UL>

<P><STRONG><a name="[2b3]"></a>ShowPwdInput</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, interfacemenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = ShowPwdInput &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowStr16b
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowChar_ASCII16b
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClr
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParEditInintProc
</UL>

<P><STRONG><a name="[283]"></a>ParEdit</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, interfacemenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ParEdit
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeSelfSetProc
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeIdleProc
</UL>

<P><STRONG><a name="[2bb]"></a>FilterAndAverage</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, battery.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FilterAndAverage
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryVoltageProc
</UL>

<P><STRONG><a name="[30c]"></a>BatteryGetCoulomeData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, battery.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicShutdownProc
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicPeriodSampleProc
</UL>

<P><STRONG><a name="[419]"></a>BatteryGetCoulomeData_D</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, battery.o(.text), UNUSED)

<P><STRONG><a name="[41a]"></a>BatteryGetVoltageTempProc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, battery.o(.text), UNUSED)

<P><STRONG><a name="[308]"></a>BatteryGetVoltageTempProc_B</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, battery.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicGetBatteryVoltage1Proc
</UL>

<P><STRONG><a name="[309]"></a>BatteryGetVoltageTempProc_D</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, battery.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicGetBatteryVoltage2Proc
</UL>

<P><STRONG><a name="[318]"></a>BatteryGetCoulomeStatus</STRONG> (Thumb, 266 bytes, Stack size 8 bytes, battery.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BatteryGetCoulomeStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicPeriodSampleProc
</UL>

<P><STRONG><a name="[30b]"></a>BatteryGetStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, battery.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicShutdownProc
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicPeriodSampleProc
</UL>

<P><STRONG><a name="[30d]"></a>BatteryGetAcrBackup</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, battery.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicShutdownProc
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicPeriodSampleProc
</UL>

<P><STRONG><a name="[298]"></a>BatteryGetVoltBackup</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, battery.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicShutdownProc
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceTaskStartProc
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicPeriodSampleProc
</UL>

<P><STRONG><a name="[299]"></a>BatterySetTotalAcr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, battery.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceTaskStartProc
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicPeriodSampleProc
</UL>

<P><STRONG><a name="[29a]"></a>BatterySetCoulomeData</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, battery.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceTaskStartProc
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicPeriodSampleProc
</UL>

<P><STRONG><a name="[30e]"></a>BatteryGetInchargeTimer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, battery.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicShutdownProc
</UL>

<P><STRONG><a name="[2b5]"></a>BatteryChongdianPinProc</STRONG> (Thumb, 644 bytes, Stack size 24 bytes, battery.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = BatteryChongdianPinProc &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputGetValue
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdcAverageValue
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryMngTask
</UL>

<P><STRONG><a name="[2b7]"></a>BatteryVoltageInintProc</STRONG> (Thumb, 878 bytes, Stack size 24 bytes, battery.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BatteryVoltageInintProc &rArr; InputGetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputGetValue
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryVoltageMidProc
</UL>

<P><STRONG><a name="[2b9]"></a>BatteryVoltageIntegralProc</STRONG> (Thumb, 1398 bytes, Stack size 12 bytes, battery.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BatteryVoltageIntegralProc
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryVoltageMidProc
</UL>

<P><STRONG><a name="[2b8]"></a>BatteryVoltageMidProc</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, battery.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = BatteryVoltageMidProc &rArr; BatteryVoltageInintProc &rArr; InputGetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryVoltageIntegralProc
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryVoltageInintProc
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryVoltageProc
</UL>

<P><STRONG><a name="[2ba]"></a>BatteryVoltageProc</STRONG> (Thumb, 1106 bytes, Stack size 24 bytes, battery.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = BatteryVoltageProc &rArr; BatteryVoltageMidProc &rArr; BatteryVoltageInintProc &rArr; InputGetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdcAverageValue
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryVoltageMidProc
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FilterAndAverage
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryMngTask
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryInit
</UL>

<P><STRONG><a name="[2bc]"></a>BatteryInit</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, battery.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = BatteryInit &rArr; BatteryVoltageProc &rArr; BatteryVoltageMidProc &rArr; BatteryVoltageInintProc &rArr; InputGetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAdcAverageValue
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryVoltageProc
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryMngTask
</UL>

<P><STRONG><a name="[f7]"></a>BatteryMngTask</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, battery.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = BatteryMngTask &rArr; BatteryInit &rArr; BatteryVoltageProc &rArr; BatteryVoltageMidProc &rArr; BatteryVoltageInintProc &rArr; InputGetValue
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryInit
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryVoltageProc
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryChongdianPinProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[2c8]"></a>IrMngInint</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, irmng.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrMng_Task
</UL>

<P><STRONG><a name="[2bd]"></a>IrSendCalibrateCodeInterface</STRONG> (Thumb, 424 bytes, Stack size 24 bytes, irmng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = IrSendCalibrateCodeInterface
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusIrColibStartProc
</UL>

<P><STRONG><a name="[2be]"></a>IrSendSearchYkqCodeInterface</STRONG> (Thumb, 406 bytes, Stack size 24 bytes, irmng.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[2bf]"></a>IrSendSetYkqIdCodeInterface</STRONG> (Thumb, 418 bytes, Stack size 24 bytes, irmng.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[2c0]"></a>IrRecvDataProc</STRONG> (Thumb, 640 bytes, Stack size 48 bytes, irmng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = IrRecvDataProc &rArr; LogicRunInfApi
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrUsartRxWtrRtrGet
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrUsartRxRdRtrSet
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrUsartRxRdRtrGet
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrUsartRxBufSizeGet
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrUsartReadRxBuf
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateLed
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrMngSendDataProc
</UL>

<P><STRONG><a name="[2c6]"></a>IrMngIdleRecvDataProc</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, irmng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IrMngIdleRecvDataProc
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrUsartRxWtrRtrGet
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrUsartRxRdRtrSet
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrUsartRxRdRtrGet
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrMng_Task
</UL>

<P><STRONG><a name="[2c7]"></a>IrMngSendDataProc</STRONG> (Thumb, 492 bytes, Stack size 32 bytes, irmng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = IrMngSendDataProc &rArr; IrSendInsertTxBuf &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrSendInsertTxBuf
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrRecvDataProc
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrMng_Task
</UL>

<P><STRONG><a name="[f3]"></a>IrMng_Task</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, irmng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = IrMng_Task &rArr; IrMngSendDataProc &rArr; IrSendInsertTxBuf &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrLOCSendInsertTxBuf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrMngSendDataProc
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrMngIdleRecvDataProc
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrMngInint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[2c9]"></a>RfidMessageForRfidRcved</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rfidmng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = RfidMessageForRfidRcved &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfidmng.o(.text)
</UL>
<P><STRONG><a name="[284]"></a>RfidMngSetRecvCallBack</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rfidmng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RfidMngSetRecvCallBack
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_RcvIntTransMsgRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrg0Proc
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateRecvNoDataProc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateTransEndProc
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateCodeDwlProc
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateTransEndProc
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateCodeDwlProc
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngInint
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfacePeriodicProc
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeSelfRecvTransPrgProc
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeIdleProc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidCXBRecvPrgProc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidCXBRecvWLPrgProc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidRecvWLPrgProc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransWLPrgProc
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusActionInfoReqProc
</UL>

<P><STRONG><a name="[1a9]"></a>RfidRecvSemCreate</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rfidmng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = RfidRecvSemCreate &rArr; OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[2cb]"></a>RfidMngInint</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, rfidmng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = RfidMngInint &rArr; SetRFChipSleepMode &rArr; SetRFChipWOR &rArr; RfidWORRegInit &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFChipSleepMode
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidStrobe
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRfidCurStatus
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLocalAddress
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRfidSRX
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSetRecvCallBack
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMng_Task
</UL>

<P><STRONG><a name="[2de]"></a>RfidGrpAckGetRfidAction</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, rfidmng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RfidGrpAckGetRfidAction
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRecvInvalidDataProc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRecvDataProc
</UL>

<P><STRONG><a name="[2cc]"></a>InsUsartTrsQueue</STRONG> (Thumb, 406 bytes, Stack size 40 bytes, rfidmng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = InsUsartTrsQueue &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc16UsartSendChick
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateSendFrame
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSendFrame
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSetupToWl
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateSendPrg
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusUsartTransWLPrgProc
</UL>

<P><STRONG><a name="[247]"></a>SendResponseData</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, rfidmng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = SendResponseData &rArr; Crc16UsartSendChick
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc16UsartSendChick
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[2ce]"></a>RfidTransformTx</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, rfidmng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = RfidTransformTx
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngWLTestSend
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSendDataKeyUp
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSendDataKeyLongDown
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSendHeart
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngNearCtrlReq
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSendDataKeyDown
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSendDataUnColibarate
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSendDataColibarate
</UL>

<P><STRONG><a name="[2cf]"></a>RfidMngSendFrame</STRONG> (Thumb, 638 bytes, Stack size 176 bytes, rfidmng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = RfidMngSendFrame &rArr; RFID_SendData &rArr; RFTxSendPacket &rArr; SetRFChipIdle &rArr; RFID_HarewreInit &rArr; RfidConfig &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_SendData
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsUsartTrsQueue
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSendDataProc
</UL>

<P><STRONG><a name="[2d0]"></a>RfidMngSendDataColibarate</STRONG> (Thumb, 508 bytes, Stack size 48 bytes, rfidmng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = RfidMngSendDataColibarate &rArr; RfidTransformTx
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidTransformTx
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusIrColibSuccessdProc
</UL>

<P><STRONG><a name="[2d1]"></a>RfidMngSendDataUnColibarate</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, rfidmng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = RfidMngSendDataUnColibarate &rArr; RfidTransformTx
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidTransformTx
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logic_task
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidUnColibrateProc
</UL>

<P><STRONG><a name="[2d2]"></a>ProtocolTransRx</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, rfidmng.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>

<P><STRONG><a name="[2d3]"></a>ProtocolTransTx</STRONG> (Thumb, 306 bytes, Stack size 72 bytes, rfidmng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ProtocolTransTx
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSendDataKeyUp
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSendDataKeyLongDown
</UL>

<P><STRONG><a name="[2d5]"></a>RfidMngSendDataKeyDown</STRONG> (Thumb, 468 bytes, Stack size 72 bytes, rfidmng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = RfidMngSendDataKeyDown &rArr; RfidTransformTx
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidTransformTx
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicSetButtonDownProc
</UL>

<P><STRONG><a name="[2d6]"></a>RfidMngNearCtrlReq</STRONG> (Thumb, 306 bytes, Stack size 56 bytes, rfidmng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = RfidMngNearCtrlReq &rArr; RfidTransformTx
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidTransformTx
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicSetNearCtrlReq
</UL>

<P><STRONG><a name="[2d7]"></a>RfidMngSendHeart</STRONG> (Thumb, 524 bytes, Stack size 48 bytes, rfidmng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = RfidMngSendHeart &rArr; RfidTransformTx
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidTransformTx
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicSetHeartProc
</UL>

<P><STRONG><a name="[2d8]"></a>RfidMngSendDataKeyLongDown</STRONG> (Thumb, 452 bytes, Stack size 48 bytes, rfidmng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = RfidMngSendDataKeyLongDown &rArr; ProtocolTransTx
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolTransTx
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidTransformTx
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicSetButtonLongDownProc
</UL>

<P><STRONG><a name="[2d9]"></a>RfidMngSendDataKeyUp</STRONG> (Thumb, 558 bytes, Stack size 48 bytes, rfidmng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = RfidMngSendDataKeyUp &rArr; ProtocolTransTx
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolTransTx
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidTransformTx
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicSetButtonUpProc
</UL>

<P><STRONG><a name="[2da]"></a>RfidMngWLTestSend</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, rfidmng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = RfidMngWLTestSend &rArr; RfidTransformTx
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidTransformTx
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicWlTestSendProc
</UL>

<P><STRONG><a name="[26d]"></a>RfidGetDataLimitlessSendFlag</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, rfidmng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RfidGetDataLimitlessSendFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionInfoSynchroTransEndProc
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartBeatCommErrTimer
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfacePeriodicProc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGrpActionStartPro
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceShiftKeyLongDownPro
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceActionKeyUpPro
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceActionKeyDownPro
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyShuntDownPro
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyNeighborPro
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainScUnColibrate
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScNeighborControlProc
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScSelfControlProc
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScUncertifiedProc
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScSetProc
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeIdleProc
</UL>

<P><STRONG><a name="[26e]"></a>RfidSetDataLimitlessSendEnd</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rfidmng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = RfidSetDataLimitlessSendEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionInfoSynchroTransEndProc
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartBeatCommErrTimer
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfacePeriodicProc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGrpActionStartPro
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceShiftKeyLongDownPro
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceActionKeyUpPro
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceActionKeyDownPro
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyShuntDownPro
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyNeighborPro
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainScUnColibrate
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScNeighborControlProc
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScSelfControlProc
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScUncertifiedProc
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScSetProc
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeIdleProc
</UL>

<P><STRONG><a name="[282]"></a>SendSetupToWl</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, rfidmng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = SendSetupToWl &rArr; InsUsartTrsQueue &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsUsartTrsQueue
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrg0Proc
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicSetYkqNumbProc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateTransEndProc
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateCodeDwlProc
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateTransEndProc
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateCodeDwlProc
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartRecvInvalidDataProc
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateMngInint
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfacePeriodicProc
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeSelfRecvTransPrgProc
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeIdleProc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidCXBRecvPrgProc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidCXBRecvWLPrgProc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidRecvWLPrgProc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusUsartTransWLPrgProc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransWLPrgProc
</UL>

<P><STRONG><a name="[2db]"></a>HeartBeatCommErrTimer</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, rfidmng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = HeartBeatCommErrTimer &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSetDataLimitlessSendEnd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidGetDataLimitlessSendFlag
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceInsertNote
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Task
</UL>

<P><STRONG><a name="[2dc]"></a>SetHeartBeat</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, rfidmng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = SetHeartBeat &rArr; LogicParamApi
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartRecvInvalidDataProc
</UL>

<P><STRONG><a name="[2dd]"></a>RfidRecvDataProc</STRONG> (Thumb, 2126 bytes, Stack size 120 bytes, rfidmng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = RfidRecvDataProc &rArr; SetRFChipSleepMode &rArr; SetRFChipWOR &rArr; RfidWORRegInit &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFChipSleepMode
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidStrobe
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRfidCurStatus
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRfidSRX
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_FetchData
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetCtrlMode
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidGrpAckGetRfidAction
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceInsertNote
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSendDataProc
</UL>

<P><STRONG><a name="[2df]"></a>RfidRecvWaitTimeoutProc</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, rfidmng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = RfidRecvWaitTimeoutProc &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getColiScNumStatus
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSendDataProc
</UL>

<P><STRONG><a name="[2e0]"></a>RfidRecvInvalidDataProc</STRONG> (Thumb, 1468 bytes, Stack size 120 bytes, rfidmng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = RfidRecvInvalidDataProc &rArr; SetRFChipSleepMode &rArr; SetRFChipWOR &rArr; RfidWORRegInit &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFChipSleepMode
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidStrobe
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRfidCurStatus
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRfidSRX
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_FetchData
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetCtrlMode
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidGrpAckGetRfidAction
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceInsertNote
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMng_Task
</UL>

<P><STRONG><a name="[2e1]"></a>UsartSendDataProc</STRONG> (Thumb, 334 bytes, Stack size 8 bytes, rfidmng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = UsartSendDataProc &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_Task
</UL>

<P><STRONG><a name="[2e2]"></a>RfidSendDataProc</STRONG> (Thumb, 1268 bytes, Stack size 32 bytes, rfidmng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = RfidSendDataProc &rArr; RfidMngSendFrame &rArr; RFID_SendData &rArr; RFTxSendPacket &rArr; SetRFChipIdle &rArr; RFID_HarewreInit &rArr; RfidConfig &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFChipSleepMode
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidStrobe
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRfidCurStatus
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRfidSRX
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getColiScNumStatus
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRecvWaitTimeoutProc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRecvDataProc
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSendFrame
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMng_Task
</UL>

<P><STRONG><a name="[2e3]"></a>RfidUsartMngInint</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rfidmng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RfidUsartMngInint
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMng_Task
</UL>

<P><STRONG><a name="[2e4]"></a>UsartRecvInvalidDataProc</STRONG> (Thumb, 122 bytes, Stack size 264 bytes, rfidmng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = UsartRecvInvalidDataProc &rArr; SendSetupToWl &rArr; InsUsartTrsQueue &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_GetFrame
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHeartBeat
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSetupToWl
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMng_Task
</UL>

<P><STRONG><a name="[f0]"></a>RfidMng_Task</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, rfidmng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = RfidMng_Task &rArr; RfidSendDataProc &rArr; RfidMngSendFrame &rArr; RFID_SendData &rArr; RFTxSendPacket &rArr; SetRFChipIdle &rArr; RFID_HarewreInit &rArr; RfidConfig &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartRecvInvalidDataProc
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUsartMngInint
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSendDataProc
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRecvInvalidDataProc
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngInint
</UL>
<BR>[Address Reference Count : 4]<UL><LI> logic.o(.text)
<LI> interface.o(.text)
<LI> main.o(.text)
<LI> rfidupdate.o(.text)
</UL>
<P><STRONG><a name="[f4]"></a>Usart_Task</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rfidmng.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = Usart_Task &rArr; HeartBeatCommErrTimer &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartSendDataProc
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartBeatCommErrTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[2fa]"></a>IapGetPrgStorageAddr</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, iapupdate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IapGetPrgStorageAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrg0Proc
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateVersionDwlProc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateVersionDwlProc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidRecvWLPrgProc
</UL>

<P><STRONG><a name="[2fb]"></a>IapGetPrgSize</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, iapupdate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IapGetPrgSize
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrg0Proc
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateVersionDwlProc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateVersionDwlProc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidRecvWLPrgProc
</UL>

<P><STRONG><a name="[2e6]"></a>NVIC_DeInit</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, iapupdate.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapJumpToApp
</UL>

<P><STRONG><a name="[2e5]"></a>IapJumpToApp</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, iapupdate.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DeInit
</UL>

<P><STRONG><a name="[2fd]"></a>IapJumpToBoot</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, iapupdate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrg0Proc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateTransEndProc
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateTransEndProc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logic_task
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrgProc
</UL>

<P><STRONG><a name="[41b]"></a>InFlashCrc</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, iapupdate.o(.text), UNUSED)

<P><STRONG><a name="[2fc]"></a>Crc16Ccitt</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, iapupdate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Crc16Ccitt
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateVersionWriteProc
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateVersionWriteProc
</UL>

<P><STRONG><a name="[2f7]"></a>Delay</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, iapupdate.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootDateUpdate
</UL>

<P><STRONG><a name="[2e7]"></a>InFlashErasePage</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, iapupdate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = InFlashErasePage &rArr; FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateVersionDwlProc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateVersionDwlProc
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootDateUpdate
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapEraserBulk
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapEraserSector
</UL>

<P><STRONG><a name="[2ea]"></a>InFlashReadBuf</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, iapupdate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = InFlashReadBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapReadBuf
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapReadFlag
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapReadCrc
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapReadCodeLen
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapLoadCode
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapExFlashCrc
</UL>

<P><STRONG><a name="[2e8]"></a>InFlashWriteBuf</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, iapupdate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = InFlashWriteBuf &rArr; FLASH_FastProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FastProgramWord
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapWriteBuf
</UL>

<P><STRONG><a name="[2e9]"></a>IapExFlashCrc</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, iapupdate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IapExFlashCrc &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlashReadBuf
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrg0Proc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateTransEndProc
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateTransEndProc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidRecvWLPrgProc
</UL>

<P><STRONG><a name="[2eb]"></a>IapLoadCode</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, iapupdate.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FastProgramWord
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlashReadBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootDateUpdate
</UL>

<P><STRONG><a name="[2ec]"></a>IapWriteCodeLen</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, iapupdate.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FastProgramWord
</UL>

<P><STRONG><a name="[2ed]"></a>IapReadCodeLen</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, iapupdate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IapReadCodeLen &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlashReadBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateTransEndProc
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateTransEndProc
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootDateUpdate
</UL>

<P><STRONG><a name="[2ee]"></a>IapWriteCrc</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, iapupdate.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FastProgramWord
</UL>

<P><STRONG><a name="[2ef]"></a>IapReadCrc</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, iapupdate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IapReadCrc &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlashReadBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateTransEndProc
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateTransEndProc
</UL>

<P><STRONG><a name="[2f0]"></a>IapReadFlag</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, iapupdate.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlashReadBuf
</UL>

<P><STRONG><a name="[2f1]"></a>IapFlagSet</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, iapupdate.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FastProgramWord
</UL>

<P><STRONG><a name="[2f2]"></a>IapFlagClear</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, iapupdate.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FastProgramWord
</UL>

<P><STRONG><a name="[1d2]"></a>IapReadBuf</STRONG> (Thumb, 26 bytes, Stack size 20 bytes, iapupdate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlashReadBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowChar_HZ16b
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrg0Proc
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateVersionDwlProc
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateTransEndProc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateVersionDwlProc
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfacePeriodicProc
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionInfoInit
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteActionInfo
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadActionInfo
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidRecvWLPrgProc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusUsartTransWLPrgProc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransWLPrgProc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrgProc
</UL>

<P><STRONG><a name="[24d]"></a>IapWriteBuf</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, iapupdate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IapWriteBuf &rArr; InFlashWriteBuf &rArr; FLASH_FastProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlashWriteBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrg0Proc
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateCodeDwlProc
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateVersionDwlProc
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateTransEndProc
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateCodeDwlProc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateVersionDwlProc
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfacePeriodicProc
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteActionInfo
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeSelfRecvTransPrgProc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrgProc
</UL>

<P><STRONG><a name="[2f3]"></a>IapEraserBulk</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, iapupdate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = IapEraserBulk &rArr; InFlashErasePage &rArr; FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlashErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateVersionDwlProc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateVersionDwlProc
</UL>

<P><STRONG><a name="[24b]"></a>IapEraserSector</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, iapupdate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = IapEraserSector &rArr; InFlashErasePage &rArr; FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlashErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrg0Proc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateTransEndProc
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateCodeDwlProc
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateVersionDwlProc
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateTransEndProc
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateCodeDwlProc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateVersionDwlProc
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteActionInfo
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeSelfRecvTransPrgProc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrgProc
</UL>

<P><STRONG><a name="[2f4]"></a>IapLcdClear</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, iapupdate.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClr
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootDateUpdate
</UL>

<P><STRONG><a name="[2f5]"></a>IapShowStr</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, iapupdate.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowStr16b
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BootDateUpdate
</UL>

<P><STRONG><a name="[2f6]"></a>BootDateUpdate</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, iapupdate.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapShowStr
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapLcdClear
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapReadCodeLen
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapLoadCode
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlashErasePage
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>

<P><STRONG><a name="[285]"></a>RfidUpdateMngInint</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, rfidupdate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = RfidUpdateMngInint &rArr; SetRfidSRX &rArr; SetRxMode &rArr; RfidRxRegInit &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidStrobe
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRfidCurStatus
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRfidSRX
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSetupToWl
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrg0Proc
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeIdleProc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidCXBRecvPrgProc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidCXBRecvWLPrgProc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidRecvWLPrgProc
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusActionInfoReqProc
</UL>

<P><STRONG><a name="[293]"></a>RfidUpdateSendPrgData</STRONG> (Thumb, 402 bytes, Stack size 40 bytes, rfidupdate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = RfidUpdateSendPrgData &rArr; LogicParamApi
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeSelfRecvTransPrgProc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidCXBRecvPrgProc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransWLPrgProc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrgProc
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusActionInfoReqProc
</UL>

<P><STRONG><a name="[2f9]"></a>RfidUpdateSendFrame</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, rfidupdate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = RfidUpdateSendFrame &rArr; RFID_SendData &rArr; RFTxSendPacket &rArr; SetRFChipIdle &rArr; RFID_HarewreInit &rArr; RfidConfig &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_SendData
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsUsartTrsQueue
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateSendDataProc
</UL>

<P><STRONG><a name="[300]"></a>RfidUpdateRecvNoDataProc</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, rfidupdate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = RfidUpdateRecvNoDataProc &rArr; RFID_Init &rArr; RFID_HarewreInit &rArr; RfidConfig &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidStrobe
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRfidCurStatus
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRfidSRX
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_Init
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSetRecvCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMng_Update_Task
</UL>

<P><STRONG><a name="[ef]"></a>RfidMng_Update_Task</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, rfidupdate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = RfidMng_Update_Task &rArr; RfidUpdateSendDataProc &rArr; RfidUpdateSendFrame &rArr; RFID_SendData &rArr; RFTxSendPacket &rArr; SetRFChipIdle &rArr; RFID_HarewreInit &rArr; RfidConfig &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateRecvNoDataProc
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateSendDataProc
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateRecvDataProc
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
</UL>
<BR>[Address Reference Count : 2]<UL><LI> logic.o(.text)
<LI> interface.o(.text)
</UL>
<P><STRONG><a name="[302]"></a>crc16_ccitt</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = crc16_ccitt
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamInint
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamSaveProc
</UL>

<P><STRONG><a name="[41c]"></a>LogicSetGrpOffLed</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, logic.o(.text), UNUSED)

<P><STRONG><a name="[301]"></a>LogicParamSaveProc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = LogicParamSaveProc &rArr; EepromWriteBytes &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteBytes
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ccitt
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicSetNoteShowTimerProc
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicSetOledShutdownTimerProc
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicSetOledProtectedTimerProc
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicSetInterCtrlTimerProc
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicSetColibarateTimeoutProc
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicSetOledProtectBrightnessProc
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicSetOledScrLightProc
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicSetRfidSendTimesProc
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicSetRfidSendTimeoutProc
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicSetIrSendTimesProc
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicSetIrSendTimeoutProc
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicSetRfidSelfNumbProc
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicSetYkqNumbProc
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicSetPrgSecProc
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicSetFastColiearateEnableProc
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicWlTestParamProc
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicIRSendParamProc
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicResumeDefaultParamProc
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamInint
</UL>

<P><STRONG><a name="[303]"></a>LogicParamInint</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = LogicParamInint &rArr; LogicParamSaveProc &rArr; EepromWriteBytes &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadBytes
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamSaveProc
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_ccitt
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicInint
</UL>

<P><STRONG><a name="[304]"></a>LogicInint</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = LogicInint &rArr; LogicParamInint &rArr; LogicParamSaveProc &rArr; EepromWriteBytes &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamInint
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;APPMng_Task
</UL>

<P><STRONG><a name="[254]"></a>LogicParamApi</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = LogicParamApi
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrg0Proc
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicResumeDefaultParamProc
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateRecvDataProc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateTransEndProc
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateTransEndProc
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRecvInvalidDataProc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRecvDataProc
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetHeartBeat
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartBeatCommErrTimer
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngWLTestSend
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSendDataKeyUp
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSendDataKeyLongDown
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSendHeart
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngNearCtrlReq
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSendDataKeyDown
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSendDataUnColibarate
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSendDataColibarate
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngInint
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrMngSendDataProc
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrRecvDataProc
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParEditSelOkProc
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParToStr
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSetupToWl
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateSendPrgData
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicShutdownProc
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceTaskStartProc
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfacePeriodicProc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGrpActionStartPro
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceShiftKeyLongDownPro
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceActionKeyUpPro
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceActionKeyDownPro
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyShuntDownPro
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyGrpCtrlPro
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyNeighborPro
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyCertifyPro
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainCtrlMode
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainYkqId
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainNote
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainRfid
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainAll
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScrProtected
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScrAwake
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetKeyLedDefaultValue
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_Init
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetActionIDByKey
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeActionInfoSyn
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScGrpControlProc
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScNeighborControlProc
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScSelfControlProc
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScUncertifiedProc
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScSetProc
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeIdleProc
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRfidTestShow
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicPeriodSampleProc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidCXBRecvPrgProc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidCXBRecvWLPrgProc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrgProc
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusActionInfoReqProc
</UL>

<P><STRONG><a name="[266]"></a>LogicRunInfApi</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = LogicRunInfApi
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicUpdateCxbWLPrgProc
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicUpdateWLPrgProc
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransPrg0Proc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicUpdateYkqPrgProc
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateRecvDataProc
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionInfoSynchroTransEndProc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateTransEndProc
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateCodeDwlProc
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateTransEndProc
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateCodeDwlProc
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSendDataProc
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRecvInvalidDataProc
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRecvWaitTimeoutProc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidRecvDataProc
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HeartBeatCommErrTimer
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngWLTestSend
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSendDataKeyUp
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSendDataKeyLongDown
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSendHeart
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngNearCtrlReq
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSendDataKeyDown
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSendDataUnColibarate
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSendDataColibarate
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrMngSendDataProc
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrRecvDataProc
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanKey_task
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateMngInint
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMng_Update_Task
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicShutdownProc
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_task
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceTaskStartProc
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfacePeriodicProc
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGrpActionStartPro
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceStopKeyLongDownPro
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceShiftKeyLongDownPro
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceActionKeyUpPro
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceActionKeyDownPro
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyShuntDownPro
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyGrpCtrlPro
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyNeighborPro
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyCertifyPro
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScUncertifiedKeyLedProc
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainInchargeDisplayCtrl
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScGrpCtrl
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScNearCtrl
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScSelfCtrl
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScUncertifiedCtrl
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainScUnColibrate
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainScColibrate
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainRfid
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainBattery
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainAll
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeActionInfoSyn
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeWLUnConnectProc
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeSelfRecvTransPrgProc
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeInchargeDisplayProc
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScNeighborControlProc
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScSelfControlProc
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScUncertifiedProc
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeScSetProc
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeSelfSetProc
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeIdleProc
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicPeriodSampleProc
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicActionInfoSynchroProc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidUnColibrateProc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidCXBRecvPrgProc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidCXBRecvWLPrgProc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidRecvWLPrgProc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusUsartTransWLPrgProc
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidTransWLPrgProc
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusInintProc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidColibStartProc
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusIrColibSuccessdProc
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusIrColibStartProc
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusActionInfoReqProc
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicUpdateCxbPrgProc
</UL>

<P><STRONG><a name="[305]"></a>RfidUpdateSendPrg</STRONG> (Thumb, 202 bytes, Stack size 104 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = RfidUpdateSendPrg &rArr; RFID_SendData &rArr; RFTxSendPacket &rArr; SetRFChipIdle &rArr; RFID_HarewreInit &rArr; RfidConfig &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_SendData
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsUsartTrsQueue
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidCXBRecvPrgProc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusRfidCXBRecvWLPrgProc
</UL>

<P><STRONG><a name="[306]"></a>LogicActionInfoSynchroProc</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, logic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
</UL>

<P><STRONG><a name="[295]"></a>LogicShutdownProc</STRONG> (Thumb, 538 bytes, Stack size 112 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = LogicShutdownProc &rArr; SetRFChipSleepMode &rArr; SetRFChipWOR &rArr; RfidWORRegInit &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskQuery
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSICmd
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSICmd
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_MSICmd
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_ClearFlag
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_GetFlagStatus
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterSTANDBYMode
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_WakeUpPinCmd
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_PVDCmd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRFChipSleepMode
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedOnOff
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetCtrlMode
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateLed
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledShutDown
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryGetInchargeTimer
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryGetAcrBackup
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryGetStatus
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryGetCoulomeData
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SleepConfiguration
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryGetVoltBackup
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetScrClosed
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceTaskStartProc
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfacePeriodicProc
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicPeriodSampleProc
</UL>

<P><STRONG><a name="[317]"></a>LogicPeriodSampleProc</STRONG> (Thumb, 1570 bytes, Stack size 48 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = LogicPeriodSampleProc &rArr; LogicShutdownProc &rArr; SetRFChipSleepMode &rArr; SetRFChipWOR &rArr; RfidWORRegInit &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetCtrlMode
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateLed
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryGetAcrBackup
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryGetCoulomeStatus
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryGetStatus
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryGetCoulomeData
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicShutdownProc
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatterySetTotalAcr
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatterySetCoulomeData
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryGetVoltBackup
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceInsertNote
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logic_task
</UL>

<P><STRONG><a name="[319]"></a>ClearRfidTestShow</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = ClearRfidTestShow &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetCtrlMode
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Logic_task
</UL>

<P><STRONG><a name="[f2]"></a>Logic_task</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = Logic_task &rArr; LogicPeriodSampleProc &rArr; LogicShutdownProc &rArr; SetRFChipSleepMode &rArr; SetRFChipWOR &rArr; RfidWORRegInit &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapJumpToBoot
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSendDataUnColibarate
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearRfidTestShow
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicPeriodSampleProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[1b1]"></a>ZZZ_Init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, zzz.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
</UL>

<P><STRONG><a name="[108]"></a>main</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = main &rArr; Driver_Init &rArr; RFID_Init &rArr; RFID_HarewreInit &rArr; RfidConfig &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Driver_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[aa]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l1xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l1xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>SysTick_Handler</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32l1xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; OSTimeTick
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l1xx_hd.o(RESET)
</UL>
<P><STRONG><a name="[28e]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolTransTx
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolTransRx
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceActionKeyUpPro
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceActionKeyDownPro
</UL>

<P><STRONG><a name="[41d]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[2d4]"></a>__aeabi_llsr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtocolTransTx
</UL>

<P><STRONG><a name="[41e]"></a>_ll_ushift_r</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[267]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputInt
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputFloat
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Init
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMenuItemsCount
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParToStr
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScGrpCtrl
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScNearCtrl
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScSelfCtrl
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScUncertifiedCtrl
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScSet
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainCtrlMode
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainYkqId
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainScColibrate
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainRfid
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainAll
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeIdleProc
</UL>

<P><STRONG><a name="[31c]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[31d]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[31b]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[100]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[31f]"></a>__printf</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, __printf_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[2a4]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParToStr
</UL>

<P><STRONG><a name="[1d5]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowStr16b
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputSelItem
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputInt
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputFloat
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenu
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuItem
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowParEdit
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParToStr
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainInchargeDisplayCtrl
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScGrpCtrl
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScNearCtrl
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScSelfCtrl
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScUncertifiedCtrl
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScSet
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainNoteDirectly
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainNote
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainAll
</UL>

<P><STRONG><a name="[25f]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParToStr
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScGrpCtrl
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScNearCtrl
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScSelfCtrl
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScUncertifiedCtrl
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScSet
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainAll
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceInsertNote
</UL>

<P><STRONG><a name="[23a]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_GetFrame
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_GetFrame
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateSendFrame
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSendFrame
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidTransformTx
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsUsartTrsQueue
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainInchargeDisplayCtrl
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainNote
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainAll
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetActionInfoByID
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetActionIDByKey
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateSendPrg
</UL>

<P><STRONG><a name="[322]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[41f]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[2f8]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicResumeDefaultParamProc
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionInfoSynchroCodeWriteProc
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionInfoSynchroCodeDwlProc
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionInfoSynchroVersionWriteProc
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActionInfoSynchroVersionDwlProc
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateCodeDwlProc
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateVersionWriteProc
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateVersionDwlProc
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateCodeDwlProc
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateVersionWriteProc
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateVersionDwlProc
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateSendPrgData
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateSendPrg
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamInint
</UL>

<P><STRONG><a name="[323]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[420]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[28d]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsartRecvInvalidDataProc
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceActionKeyDownPro
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[421]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[422]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[423]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2ab]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenu
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuItem
</UL>

<P><STRONG><a name="[1f8]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrUsartParamInit
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateSendFrame
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WL_RfidUpdateCodeDwlProc
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUsartMngInint
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSendFrame
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsUsartTrsQueue
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngInint
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateMngInint
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadActionInfo
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateSendPrg
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicInint
</UL>

<P><STRONG><a name="[326]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[325]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[258]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSendFrame
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearActionInfo
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainTransRecvPrgCtrl
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScNearCtrl
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScSelfCtrl
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScUncertifiedCtrl
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMainAll
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceTakeOutReverseKey
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusUsartTransWLPrgProc
</UL>

<P><STRONG><a name="[424]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[425]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[327]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[2aa]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenu
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuItem
</UL>

<P><STRONG><a name="[2a5]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Init
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMenuItemsCount
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParToStr
</UL>

<P><STRONG><a name="[426]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[427]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[428]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[31e]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[31a]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[f9]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[328]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[329]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[102]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[429]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[42a]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[32a]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[324]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[42b]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[104]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[109]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[42c]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[32b]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[42d]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[42e]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[42f]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[430]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[320]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[10e]"></a>SetSysClock</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, system_stm32l1xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SetSysClock &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[13f]"></a>TI4_Config</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[13d]"></a>TI3_Config</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[13b]"></a>TI2_Config</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[139]"></a>TI1_Config</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, stm32l1xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[150]"></a>OS_InitTaskIdle</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = OS_InitTaskIdle &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[153]"></a>OS_InitEventList</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_InitEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[155]"></a>OS_InitTCBList</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, os_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_InitTCBList
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[159]"></a>OS_InitRdyList</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[158]"></a>OS_InitMisc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[15d]"></a>OS_SchedNew</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, os_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[16e]"></a>OS_FlagTaskRdy</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagDel
</UL>

<P><STRONG><a name="[174]"></a>OS_FlagBlock</STRONG> (Thumb, 152 bytes, Stack size 20 bytes, os_flag.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
</UL>

<P><STRONG><a name="[17c]"></a>OSMutex_RdyAtPrio</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, os_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OSMutex_RdyAtPrio
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexPost
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSMutexDel
</UL>

<P><STRONG><a name="[1cb]"></a>DelayUs</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = DelayUs &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledLowLevelInit
</UL>

<P><STRONG><a name="[1dc]"></a>KeyIsValid</STRONG> (Thumb, 356 bytes, Stack size 0 bytes, key.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScanProc
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcceptKey
</UL>

<P><STRONG><a name="[1df]"></a>key_Btnkey_D</STRONG> (Thumb, 172 bytes, Stack size 28 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = key_Btnkey_D
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcceptKey
</UL>

<P><STRONG><a name="[1ed]"></a>SH_CP_595</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, keyled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SH_CP_595
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedShift_595
</UL>

<P><STRONG><a name="[1ee]"></a>ST_CP_595</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, keyled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ST_CP_595
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedScan
</UL>

<P><STRONG><a name="[1f0]"></a>keyLed_Btokey_DLed</STRONG> (Thumb, 114 bytes, Stack size 28 bytes, keyled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = keyLed_Btokey_DLed
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedToggle
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLed111
</UL>

<P><STRONG><a name="[1f2]"></a>LedShift_595</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, keyled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LedShift_595 &rArr; SH_CP_595
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SH_CP_595
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedScan
</UL>

<P><STRONG><a name="[224]"></a>SpiMcuWrite</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, rfid_cc1101.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitGPIOReset
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_SPI_SendByte
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidWriteFifo
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSpiWrite
</UL>

<P><STRONG><a name="[232]"></a>SpiMcuRead</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, rfid_cc1101.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SpiMcuRead &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitGPIOReset
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_SPI_SendByte
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidReadFifo
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidReadStatusReg
</UL>

<P><STRONG><a name="[c]"></a>InterfaceModeInintProc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, interface.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[286]"></a>calcNumProc</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceModeIdleProc
</UL>

<P><STRONG><a name="[b]"></a>InterfaceModeIdleProc</STRONG> (Thumb, 2846 bytes, Stack size 104 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = InterfaceModeIdleProc &rArr; ShowMain &rArr; ShowMainAll &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedOnOff
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetCtrlMode
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKey
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateLed
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowStr16b
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_Init
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSetupToWl
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateMngInint
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSetDataLimitlessSendEnd
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSetRecvCallBack
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidGetDataLimitlessSendFlag
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParEdit
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScSelfKeyLedProc
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScUncertifiedKeyLedProc
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScSetKeyLedProc
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMain
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetDownloadRemainTimer
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceInsertNote
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calcNumProc
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>InterfaceModeSelfSetProc</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = InterfaceModeSelfSetProc &rArr; ShowMain &rArr; ShowMainAll &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParEdit
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowSelfSetKeyLedProc
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMain
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceInsertNote
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>InterfaceModeScSetProc</STRONG> (Thumb, 1442 bytes, Stack size 48 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292 + Unknown Stack Size
<LI>Call Chain = InterfaceModeScSetProc &rArr; ShowMain &rArr; ShowMainAll &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedOnOff
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetCtrlMode
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateLed
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSetDataLimitlessSendEnd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidGetDataLimitlessSendFlag
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScSelfKeyLedProc
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScUncertifiedKeyLedProc
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScSetKeyLedProc
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMain
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceInsertNote
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetKeyRfidDataShowName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>InterfaceModeScUncertifiedProc</STRONG> (Thumb, 1870 bytes, Stack size 64 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = InterfaceModeScUncertifiedProc &rArr; InterfaceActionKeyDownPro &rArr; ShowMain &rArr; ShowMainAll &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setColiScNumStatus
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getColiScNumStatus
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedOnOff
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetCtrlMode
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateLed
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowStr16b
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSetDataLimitlessSendEnd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidGetDataLimitlessSendFlag
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGrpActionStartPro
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceStopKeyLongDownPro
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceShiftKeyLongDownPro
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceActionKeyUpPro
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceActionKeyDownPro
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyShuntDownPro
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyNeighborPro
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyCertifyPro
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearActionInfo
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScSelfKeyLedProc
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScUncertifiedKeyLedProc
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMain
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceInsertNote
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>InterfaceModeScSelfControlProc</STRONG> (Thumb, 4240 bytes, Stack size 64 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = InterfaceModeScSelfControlProc &rArr; InterfaceKeyCertifyPro &rArr; ShowMain &rArr; ShowMainAll &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setColiScNumStatus
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getColiScNumStatus
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedOnOff
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetCtrlMode
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateLed
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowStr16b
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSetDataLimitlessSendEnd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidGetDataLimitlessSendFlag
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyCertifyPro
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScGrpKeyLedProc
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScSelfKeyLedProc
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScUncertifiedKeyLedProc
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMain
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceInsertNote
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetKeyRfidDataShowName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>InterfaceModeScNeighborControlProc</STRONG> (Thumb, 2532 bytes, Stack size 72 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = InterfaceModeScNeighborControlProc &rArr; InterfaceActionKeyDownPro &rArr; ShowMain &rArr; ShowMainAll &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setColiScNumStatus
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getColiScNumStatus
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedOnOff
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetCtrlMode
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateLed
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowStr16b
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSetDataLimitlessSendEnd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidGetDataLimitlessSendFlag
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGrpActionStartPro
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceStopKeyLongDownPro
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceShiftKeyLongDownPro
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceActionKeyUpPro
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceActionKeyDownPro
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyShuntDownPro
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyNeighborPro
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyCertifyPro
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearActionInfo
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScSelfKeyLedProc
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScUncertifiedKeyLedProc
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMain
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceInsertNote
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>InterfaceModeScGrpControlProc</STRONG> (Thumb, 760 bytes, Stack size 48 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412 + Unknown Stack Size
<LI>Call Chain = InterfaceModeScGrpControlProc &rArr; InterfaceActionKeyDownPro &rArr; ShowMain &rArr; ShowMainAll &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetCtrlMode
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateLed
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGrpActionStartPro
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceStopKeyLongDownPro
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceShiftKeyLongDownPro
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceActionKeyDownPro
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyShuntDownPro
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyGrpCtrlPro
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyNeighborPro
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceKeyCertifyPro
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScGrpKeyLedProc
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScSelfKeyLedProc
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowScUncertifiedKeyLedProc
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMain
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceInsertNote
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>InterfaceModeShutdownProc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, interface.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>InterfaceModeInchargeDisplayProc</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = InterfaceModeInchargeDisplayProc &rArr; ShowMain &rArr; ShowMainAll &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMain
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>InterfaceModeSelfRecvTransPrgProc</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = InterfaceModeSelfRecvTransPrgProc &rArr; ShowMain &rArr; ShowMainAll &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetCtrlMode
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateLed
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_Init
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSetupToWl
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateSendPrgData
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSetRecvCallBack
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapWriteBuf
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapEraserSector
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowOnlineUpdateKeyLedProc
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMain
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceInsertNote
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>InterfaceModeWLUnConnectProc</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = InterfaceModeWLUnConnectProc &rArr; ShowMain &rArr; ShowMainAll &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedOnOff
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateLed
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMain
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceInsertNote
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>InterfaceModeActionInfoSyn</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284 + Unknown Stack Size
<LI>Call Chain = InterfaceModeActionInfoSyn &rArr; InterfaceShiftKeyLongDownPro &rArr; ShowMain &rArr; ShowMainAll &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceShiftKeyLongDownPro
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMain
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceInsertNote
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interface.o(.data)
</UL>
<P><STRONG><a name="[2a3]"></a>ParToStr</STRONG> (Thumb, 930 bytes, Stack size 80 bytes, interfacemenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = ParToStr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuItem
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowParEdit
</UL>

<P><STRONG><a name="[2a6]"></a>ShowParEdit</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, interfacemenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = ShowParEdit &rArr; ParToStr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowChar_ASCII16b
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParToStr
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParEditPwrOkProc
</UL>

<P><STRONG><a name="[2a7]"></a>GetMenuItemsCount</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, interfacemenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GetMenuItemsCount &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Init
</UL>

<P><STRONG><a name="[2a8]"></a>Menu_Init</STRONG> (Thumb, 332 bytes, Stack size 40 bytes, interfacemenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = Menu_Init &rArr; GetMenuItemsCount &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMenuItemsCount
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenu
</UL>

<P><STRONG><a name="[2a9]"></a>ShowMenuItem</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, interfacemenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = ShowMenuItem &rArr; ParToStr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowStr16b
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdAreaClr
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParToStr
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuNext
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuLast
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenu
</UL>

<P><STRONG><a name="[2ac]"></a>ShowMenu</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, interfacemenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ShowMenu &rArr; ShowMenuItem &rArr; ParToStr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowStr16b
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClr
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuItem
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_Init
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParEditSelOkProc
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParEditSelGlobalProc
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParEditIngProc
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParEditPwrOkProc
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParEditPwrProc
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParEditInintProc
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParEditStartProc
</UL>

<P><STRONG><a name="[2ad]"></a>ShowMenuLast</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, interfacemenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = ShowMenuLast &rArr; ShowMenuItem &rArr; ParToStr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuItem
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParEditPwrOkProc
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParEditInintProc
</UL>

<P><STRONG><a name="[2ae]"></a>ShowMenuNext</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, interfacemenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = ShowMenuNext &rArr; ShowMenuItem &rArr; ParToStr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuItem
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParEditPwrOkProc
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParEditInintProc
</UL>

<P><STRONG><a name="[2b1]"></a>DigitKeyToChr</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, interfacemenu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputInt
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputFloat
</UL>

<P><STRONG><a name="[2b0]"></a>InputFloat</STRONG> (Thumb, 604 bytes, Stack size 56 bytes, interfacemenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = InputFloat &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowStr16b
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdAreaClr
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitKeyToChr
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParEditIngProc
</UL>

<P><STRONG><a name="[2b2]"></a>InputInt</STRONG> (Thumb, 1052 bytes, Stack size 72 bytes, interfacemenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228 + Unknown Stack Size
<LI>Call Chain = InputInt &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowStr16b
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowChar_ASCII16b
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdAreaClr
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClr
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitKeyToChr
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParEditIngProc
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParEditPwrProc
</UL>

<P><STRONG><a name="[10]"></a>ParEditStartProc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, interfacemenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ParEditStartProc &rArr; ShowMenu &rArr; ShowMenuItem &rArr; ParToStr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interfacemenu.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>ParEditInintProc</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, interfacemenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = ParEditInintProc &rArr; ShowMenu &rArr; ShowMenuItem &rArr; ParToStr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowPwdInput
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuNext
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuLast
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interfacemenu.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>ParEditPwrProc</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, interfacemenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ParEditPwrProc &rArr; ShowMenu &rArr; ShowMenuItem &rArr; ParToStr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputInt
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interfacemenu.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>ParEditPwrOkProc</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, interfacemenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = ParEditPwrOkProc &rArr; ShowMenu &rArr; ShowMenuItem &rArr; ParToStr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuNext
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenuLast
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenu
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowParEdit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interfacemenu.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>ParEditIngProc</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, interfacemenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = ParEditIngProc &rArr; ShowMenu &rArr; ShowMenuItem &rArr; ParToStr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowStr16b
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClr
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputSelItem
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputCmd
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputInt
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputFloat
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interfacemenu.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>ParEditSelGlobalProc</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, interfacemenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = ParEditSelGlobalProc &rArr; ShowMenu &rArr; ShowMenuItem &rArr; ParToStr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowStr16b
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interfacemenu.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>ParEditSelOkProc</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, interfacemenu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = ParEditSelOkProc &rArr; ShowMenu &rArr; ShowMenuItem &rArr; ParToStr &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowMenu
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interfacemenu.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>RfidUpdateVersionDwlProc</STRONG> (Thumb, 732 bytes, Stack size 32 bytes, rfidupdate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = RfidUpdateVersionDwlProc &rArr; IapWriteBuf &rArr; InFlashWriteBuf &rArr; FLASH_FastProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetCtrlMode
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapReadBuf
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapEraserBulk
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlashErasePage
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapGetPrgSize
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapGetPrgStorageAddr
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapWriteBuf
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapEraserSector
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceDecDownloadRemainTimer
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetDownloadRemainTimer
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfidupdate.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>RfidUpdateVersionWriteProc</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, rfidupdate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = RfidUpdateVersionWriteProc &rArr; InterfaceSetCtrlMode &rArr; LogicParamApi
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetCtrlMode
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc16Ccitt
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceDecDownloadRemainTimer
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfidupdate.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>RfidUpdateCodeDwlProc</STRONG> (Thumb, 498 bytes, Stack size 24 bytes, rfidupdate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = RfidUpdateCodeDwlProc &rArr; RFID_Init &rArr; RFID_HarewreInit &rArr; RfidConfig &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetCtrlMode
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateLed
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_Init
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSetupToWl
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSetRecvCallBack
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapWriteBuf
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapEraserSector
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceDecDownloadRemainTimer
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceInsertNote
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfidupdate.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>RfidUpdateCodeWriteProc</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, rfidupdate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = RfidUpdateCodeWriteProc &rArr; InterfaceSetCtrlMode &rArr; LogicParamApi
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetCtrlMode
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceDecDownloadRemainTimer
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfidupdate.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>RfidUpdateTransEndProc</STRONG> (Thumb, 650 bytes, Stack size 32 bytes, rfidupdate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = RfidUpdateTransEndProc &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedOnOff
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetCtrlMode
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateLed
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapReadBuf
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowStr16b
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdAreaClr
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_Init
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapReadCrc
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapReadCodeLen
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapExFlashCrc
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapJumpToBoot
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSetupToWl
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSetRecvCallBack
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapWriteBuf
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapEraserSector
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceInsertNote
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfidupdate.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>WL_RfidUpdateVersionDwlProc</STRONG> (Thumb, 766 bytes, Stack size 24 bytes, rfidupdate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = WL_RfidUpdateVersionDwlProc &rArr; IapWriteBuf &rArr; InFlashWriteBuf &rArr; FLASH_FastProgramWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetCtrlMode
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapReadBuf
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapEraserBulk
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InFlashErasePage
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapGetPrgSize
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapGetPrgStorageAddr
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapWriteBuf
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapEraserSector
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceDecDownloadRemainTimer
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetDownloadRemainTimer
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfidupdate.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>WL_RfidUpdateVersionWriteProc</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, rfidupdate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = WL_RfidUpdateVersionWriteProc &rArr; InterfaceSetCtrlMode &rArr; LogicParamApi
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetCtrlMode
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc16Ccitt
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceDecDownloadRemainTimer
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfidupdate.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>WL_RfidUpdateCodeDwlProc</STRONG> (Thumb, 680 bytes, Stack size 24 bytes, rfidupdate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = WL_RfidUpdateCodeDwlProc &rArr; RFID_Init &rArr; RFID_HarewreInit &rArr; RfidConfig &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetCtrlMode
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateLed
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_Init
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSetupToWl
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSetRecvCallBack
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapWriteBuf
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapEraserSector
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceDecDownloadRemainTimer
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceInsertNote
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfidupdate.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>WL_RfidUpdateCodeWriteProc</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, rfidupdate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = WL_RfidUpdateCodeWriteProc &rArr; InterfaceSetCtrlMode &rArr; LogicParamApi
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetCtrlMode
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceDecDownloadRemainTimer
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfidupdate.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>WL_RfidUpdateTransEndProc</STRONG> (Thumb, 618 bytes, Stack size 32 bytes, rfidupdate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = WL_RfidUpdateTransEndProc &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc16UsartSendChick
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedOnOff
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetCtrlMode
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateLed
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowStr16b
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdAreaClr
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_Init
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapReadCrc
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapReadCodeLen
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapExFlashCrc
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapJumpToBoot
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSetupToWl
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSetRecvCallBack
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapEraserSector
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceInsertNote
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteActionInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfidupdate.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>ActionInfoSynchroVersionDwlProc</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, rfidupdate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = ActionInfoSynchroVersionDwlProc &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceDecDownloadRemainTimer
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetDownloadRemainTimer
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfidupdate.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>ActionInfoSynchroVersionWriteProc</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, rfidupdate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ActionInfoSynchroVersionWriteProc &rArr; InterfaceSetCtrlMode &rArr; LogicParamApi
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetCtrlMode
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceDecDownloadRemainTimer
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfidupdate.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>ActionInfoSynchroCodeDwlProc</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, rfidupdate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ActionInfoSynchroCodeDwlProc &rArr; InterfaceSetCtrlMode &rArr; LogicParamApi
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetCtrlMode
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceDecDownloadRemainTimer
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfidupdate.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>ActionInfoSynchroCodeWriteProc</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, rfidupdate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ActionInfoSynchroCodeWriteProc &rArr; InterfaceSetCtrlMode &rArr; LogicParamApi
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetCtrlMode
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceDecDownloadRemainTimer
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfidupdate.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>ActionInfoSynchroTransEndProc</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, rfidupdate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = ActionInfoSynchroTransEndProc &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc16UsartSendChick
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetCtrlMode
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateLed
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowStr16b
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdAreaClr
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidSetDataLimitlessSendEnd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidGetDataLimitlessSendFlag
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetDownloadRemainTimer
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteActionInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfidupdate.o(.data)
</UL>
<P><STRONG><a name="[2fe]"></a>RfidUpdateRecvDataProc</STRONG> (Thumb, 564 bytes, Stack size 152 bytes, rfidupdate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = RfidUpdateRecvDataProc &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_FetchData
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceGetCtrlMode
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMng_Update_Task
</UL>

<P><STRONG><a name="[2ff]"></a>RfidUpdateSendDataProc</STRONG> (Thumb, 298 bytes, Stack size 8 bytes, rfidupdate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = RfidUpdateSendDataProc &rArr; RfidUpdateSendFrame &rArr; RFID_SendData &rArr; RFTxSendPacket &rArr; SetRFChipIdle &rArr; RFID_HarewreInit &rArr; RfidConfig &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedToggle
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateSendFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMng_Update_Task
</UL>

<P><STRONG><a name="[3f]"></a>LogicGetPrgSecProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>LogicGetYkqNumbProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[5e]"></a>LogicSetCtrlModeProc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[5f]"></a>LogicGetCtrlModeProc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>LogicGetRfidSelfNumbProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>LogicGetIrSendTimeoutProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>LogicGetIrSendTimesProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>LogicGetRfidSendTimeoutProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[45]"></a>LogicGetRfidSendTimesProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[46]"></a>LogicGetOledScrLightProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>LogicGetOledProtectBrightnessProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[4a]"></a>LogicgGetColibarateTimeoutProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[4b]"></a>LogicGetInterCtrlTimerProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[48]"></a>LogicGetOledProtectedTimerProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>LogicGetOledShutdownTimerProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>LogicGetNoteShowTimerProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[4d]"></a>LogicGetScCtrlDislayTimerProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[4e]"></a>LogicGetYkqIdBackupProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[4f]"></a>LogicGetShutDownFlagProc</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = LogicGetShutDownFlagProc &rArr; EepromWriteBytes &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteBytes
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[50]"></a>LogicGetBatteryAcrBackupProc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = LogicGetBatteryAcrBackupProc &rArr; EepromReadBytes &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[51]"></a>LogicGetBatteryColDataBackupProc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = LogicGetBatteryColDataBackupProc &rArr; EepromReadBytes &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[52]"></a>LogicGetBatterVoltageBackupProc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = LogicGetBatterVoltageBackupProc &rArr; EepromReadBytes &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[53]"></a>LogicGetBatterInchargeTimerProc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = LogicGetBatterInchargeTimerProc &rArr; EepromReadBytes &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromReadBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[54]"></a>LogicGetYkqAppStationProc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[55]"></a>LogicResumeDefaultParamProc</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = LogicResumeDefaultParamProc &rArr; LogicParamSaveProc &rArr; EepromWriteBytes &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledContrastAdj
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamSaveProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[56]"></a>LogicIRSendParamProc</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = LogicIRSendParamProc &rArr; LogicParamSaveProc &rArr; EepromWriteBytes &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamSaveProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[57]"></a>LogicGETIRSendParamProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[61]"></a>LogicWlTestParamProc</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = LogicWlTestParamProc &rArr; LogicParamSaveProc &rArr; EepromWriteBytes &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamSaveProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[60]"></a>LogicGetWlTestParamProc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[59]"></a>LogicSetFastColiearateEnableProc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = LogicSetFastColiearateEnableProc &rArr; LogicParamSaveProc &rArr; EepromWriteBytes &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamSaveProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[58]"></a>LogicGetFastColiearateEnableProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>LogicSetPrgSecProc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = LogicSetPrgSecProc &rArr; LogicParamSaveProc &rArr; EepromWriteBytes &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamSaveProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>LogicSetYkqNumbProc</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = LogicSetYkqNumbProc &rArr; LogicParamSaveProc &rArr; EepromWriteBytes &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLocalAddress
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSetupToWl
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamSaveProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>LogicSetRfidSelfNumbProc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = LogicSetRfidSelfNumbProc &rArr; LogicParamSaveProc &rArr; EepromWriteBytes &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLocalAddress
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamSaveProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>LogicSetIrSendTimeoutProc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = LogicSetIrSendTimeoutProc &rArr; LogicParamSaveProc &rArr; EepromWriteBytes &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamSaveProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>LogicSetIrSendTimesProc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = LogicSetIrSendTimesProc &rArr; LogicParamSaveProc &rArr; EepromWriteBytes &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamSaveProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>LogicSetRfidSendTimeoutProc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = LogicSetRfidSendTimeoutProc &rArr; LogicParamSaveProc &rArr; EepromWriteBytes &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamSaveProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>LogicSetRfidSendTimesProc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = LogicSetRfidSendTimesProc &rArr; LogicParamSaveProc &rArr; EepromWriteBytes &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamSaveProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>LogicSetOledScrLightProc</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = LogicSetOledScrLightProc &rArr; LogicParamSaveProc &rArr; EepromWriteBytes &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OledContrastAdj
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamSaveProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>LogicSetOledProtectBrightnessProc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = LogicSetOledProtectBrightnessProc &rArr; LogicParamSaveProc &rArr; EepromWriteBytes &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamSaveProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>LogicSetColibarateTimeoutProc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = LogicSetColibarateTimeoutProc &rArr; LogicParamSaveProc &rArr; EepromWriteBytes &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamSaveProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>LogicSetInterCtrlTimerProc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = LogicSetInterCtrlTimerProc &rArr; LogicParamSaveProc &rArr; EepromWriteBytes &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamSaveProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>LogicSetOledProtectedTimerProc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = LogicSetOledProtectedTimerProc &rArr; LogicParamSaveProc &rArr; EepromWriteBytes &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamSaveProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>LogicSetOledShutdownTimerProc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = LogicSetOledShutdownTimerProc &rArr; LogicParamSaveProc &rArr; EepromWriteBytes &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamSaveProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>LogicSetNoteShowTimerProc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = LogicSetNoteShowTimerProc &rArr; LogicParamSaveProc &rArr; EepromWriteBytes &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamSaveProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>LogicSetScCtrlDislayTimerProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>LogicSetYkqIdBackupProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>LogicSetShutDownFlagProc</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = LogicSetShutDownFlagProc &rArr; EepromWriteBytes &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>LogicSetBatteryAcrBackupProc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = LogicSetBatteryAcrBackupProc &rArr; EepromWriteBytes &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>LogicSetBatteryColDataBackupProc</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = LogicSetBatteryColDataBackupProc &rArr; EepromWriteBytes &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>LogicSetBatterVoltageBackupProc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = LogicSetBatterVoltageBackupProc &rArr; EepromWriteBytes &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>LogicSetBatterInchargeTimerProc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = LogicSetBatterInchargeTimerProc &rArr; EepromWriteBytes &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromWriteBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>LogicUpdateYkqPrgProc</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = LogicUpdateYkqPrgProc &rArr; LogicRunInfApi
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[a1]"></a>LogicStatusRfidTransPrg0Proc</STRONG> (Thumb, 1178 bytes, Stack size 32 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = LogicStatusRfidTransPrg0Proc &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedOnOff
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateLed
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapReadBuf
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowStr16b
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdAreaClr
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClr
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_Init
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapExFlashCrc
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapJumpToBoot
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapGetPrgSize
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapGetPrgStorageAddr
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSetupToWl
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateMngInint
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSetRecvCallBack
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapWriteBuf
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapEraserSector
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetDownloadRemainTimer
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceInsertNote
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>LogicUpdateWLPrgProc</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = LogicUpdateWLPrgProc &rArr; LogicRunInfApi
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>LogicUpdateCxbWLPrgProc</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = LogicUpdateCxbWLPrgProc &rArr; LogicRunInfApi
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>LogicUpdateCxbPrgProc</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = LogicUpdateCxbPrgProc &rArr; LogicRunInfApi
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[62]"></a>LogicSetColibrateScTypeProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[63]"></a>LogicSetScNumbDirectProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[64]"></a>LogicSetColibrateScNumbProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[90]"></a>LogicSetActionInfoCrc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[91]"></a>LogicGetActionInfoCrc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[307]"></a>LogicStatusActionInfoReqProc</STRONG> (Thumb, 324 bytes, Stack size 48 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = LogicStatusActionInfoReqProc &rArr; RfidUpdateMngInint &rArr; SetRfidSRX &rArr; SetRxMode &rArr; RfidRxRegInit &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedOnOff
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateLed
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateSendPrgData
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateMngInint
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSetRecvCallBack
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetDownloadRemainTimer
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceInsertNote
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicActionInfoSynchroReq
</UL>

<P><STRONG><a name="[92]"></a>LogicActionInfoSynchroReq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = LogicActionInfoSynchroReq &rArr; LogicStatusActionInfoReqProc &rArr; RfidUpdateMngInint &rArr; SetRfidSRX &rArr; SetRxMode &rArr; RfidRxRegInit &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicStatusActionInfoReqProc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[65]"></a>LogicSetCtrlScNumbProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[66]"></a>LogicSetRfidFrameTypeProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[67]"></a>LogicSetScActionNameProc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[68]"></a>LogicSetGrpDirectionProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[69]"></a>LogicSetGrpAckActionNameProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[6a]"></a>LogicSetGrpNearScNumbProc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[6b]"></a>LogicSetGrpRemoteScNumbProc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[6c]"></a>LogicSetRunStatusProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[6d]"></a>LogicSetButtonDownProc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = LogicSetButtonDownProc &rArr; RfidMngSendDataKeyDown &rArr; RfidTransformTx
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSendDataKeyDown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[6e]"></a>LogicSetButtonDownAckProc</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[6f]"></a>LogicSetButtonStatusProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[70]"></a>LogicSetButtonLongDownProc</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = LogicSetButtonLongDownProc &rArr; RfidMngSendDataKeyLongDown &rArr; ProtocolTransTx
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSendDataKeyLongDown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[71]"></a>LogicSetButtonUpProc</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = LogicSetButtonUpProc &rArr; RfidMngSendDataKeyUp &rArr; ProtocolTransTx
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSendDataKeyUp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[72]"></a>LogicSetScActionTypeProc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[73]"></a>LogicSetScGejiaNumberProc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[74]"></a>LogicSetBatteryStatusProc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[75]"></a>LogicSetBatteryCoulomStatusProc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[76]"></a>LogicSetBatteryCoulomDataProc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[77]"></a>LogicSetRfidSignStatusProc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[5a]"></a>LogicSetWLVersionProc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[5b]"></a>LogicGetWLVersionProc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[5c]"></a>LogicGetBatteryVoltage1Proc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LogicGetBatteryVoltage1Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryGetVoltageTempProc_B
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[5d]"></a>LogicGetBatteryVoltage2Proc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LogicGetBatteryVoltage2Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryGetVoltageTempProc_D
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[78]"></a>LogicGetColibrateScTypeProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[79]"></a>LogicGetScNumbDirectProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[7a]"></a>LogicGetColibrateScNumbProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[8f]"></a>LogicGetColibrateSuccessScNumbProc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[8e]"></a>LogicSetColibrateSuccessScNumbProc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[7b]"></a>LogicGetCtrlScNumbProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[7c]"></a>LogicGetRfidFrameTypeProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[7d]"></a>LogicGetScActionNameProc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[7e]"></a>LogicGetGrpDirectionProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[7f]"></a>LogicGetGrpAckActionNameProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[80]"></a>LogicGetGrpNearScNumbProc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[81]"></a>LogicGetGrpRemoteScNumbProc</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[82]"></a>LogicGetRunStatusProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[83]"></a>LogicGetButtonDownProc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[84]"></a>LogicGetButtonDownAckProc</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[93]"></a>LogicSetHeartProc</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = LogicSetHeartProc &rArr; RfidMngSendHeart &rArr; RfidTransformTx
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSendHeart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[94]"></a>LogicSetNearCtrlReq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = LogicSetNearCtrlReq &rArr; RfidMngNearCtrlReq &rArr; RfidTransformTx
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngNearCtrlReq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[85]"></a>LogicGetButtonStatusProc</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[86]"></a>LogicGetButtonLongDownProc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[87]"></a>LogicGetButtonUpProc</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[88]"></a>LogicGetScActionTypeProc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[89]"></a>LogicGetScGejiaNumberProc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[8a]"></a>LogicGetBatteryStatusProc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[8b]"></a>LogicGetBatteryCoulomStatusProc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[8c]"></a>LogicGetBatteryCoulomDataProc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[8d]"></a>LogicGetRfidSignStatusProc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[96]"></a>LogicStatusIdleProc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[97]"></a>LogicStatusIrColibStartProc</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = LogicStatusIrColibStartProc &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrSendCalibrateCodeInterface
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[98]"></a>LogicStatusIrColibSuccessdProc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = LogicStatusIrColibSuccessdProc &rArr; RfidMngSendDataColibarate &rArr; RfidTransformTx
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateLed
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSendDataColibarate
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[99]"></a>LogicStatusIrColibFailProc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[9a]"></a>LogicStatusRfidColibStartProc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = LogicStatusRfidColibStartProc &rArr; LogicRunInfApi
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[9b]"></a>LogicStatusRfidColibSuccessdProc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[a0]"></a>LogicStatusInintProc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = LogicStatusInintProc &rArr; LogicRunInfApi
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[9c]"></a>LogicStatusRfidColibFailProc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[9d]"></a>LogicStatusScSelfCtrlProc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[a2]"></a>LogicStatusRfidTransPrgProc</STRONG> (Thumb, 1000 bytes, Stack size 80 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = LogicStatusRfidTransPrgProc &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetLatency
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedOnOff
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateLed
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapReadBuf
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowStr16b
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdAreaClr
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapJumpToBoot
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateSendPrgData
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapWriteBuf
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapEraserSector
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[a4]"></a>LogicStatusRfidTransWLPrgProc</STRONG> (Thumb, 858 bytes, Stack size 80 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = LogicStatusRfidTransWLPrgProc &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedOnOff
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateLed
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapReadBuf
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowStr16b
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdAreaClr
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_Init
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSetupToWl
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateSendPrgData
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSetRecvCallBack
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceInsertNote
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[a5]"></a>LogicStatusUsartTransWLPrgProc</STRONG> (Thumb, 606 bytes, Stack size 144 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = LogicStatusUsartTransWLPrgProc &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedOnOff
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateLed
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapReadBuf
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowStr16b
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdAreaClr
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InsUsartTrsQueue
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSetupToWl
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceInsertNote
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[a8]"></a>LogicStatusRfidRecvWLPrgProc</STRONG> (Thumb, 958 bytes, Stack size 24 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = LogicStatusRfidRecvWLPrgProc &rArr; ShowStr16b &rArr; ShowChar_HZ16b &rArr; IapReadBuf &rArr; InFlashReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskResume
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedOnOff
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateLed
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapReadBuf
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowStr16b
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LcdClr
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_Init
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapExFlashCrc
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapGetPrgSize
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IapGetPrgStorageAddr
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSetupToWl
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateMngInint
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSetRecvCallBack
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetDownloadRemainTimer
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceInsertNote
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[30a]"></a>LogicStatusUnconnectWLProc</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, logic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateLed
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceInsertNote
</UL>

<P><STRONG><a name="[a7]"></a>LogicStatusRfidCXBRecvWLPrgProc</STRONG> (Thumb, 338 bytes, Stack size 48 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = LogicStatusRfidCXBRecvWLPrgProc &rArr; RfidUpdateSendPrg &rArr; RFID_SendData &rArr; RFTxSendPacket &rArr; SetRFChipIdle &rArr; RFID_HarewreInit &rArr; RfidConfig &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedOnOff
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateLed
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_Init
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSetupToWl
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateMngInint
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSetRecvCallBack
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetDownloadRemainTimer
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceInsertNote
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateSendPrg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[a6]"></a>LogicStatusRfidCXBRecvPrgProc</STRONG> (Thumb, 430 bytes, Stack size 48 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = LogicStatusRfidCXBRecvPrgProc &rArr; RfidUpdateSendPrg &rArr; RFID_SendData &rArr; RFTxSendPacket &rArr; SetRFChipIdle &rArr; RFID_HarewreInit &rArr; RfidConfig &rArr; RfidWriteReg &rArr; RfidSpiWrite &rArr; SpiMcuWrite &rArr; WaitGPIOReset
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskDel
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyLedOnOff
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StateLed
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFID_Init
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendSetupToWl
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateSendPrgData
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateMngInint
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSetRecvCallBack
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicParamApi
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetUpdateMainMethod
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetDownloadRemainTimer
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceSetCtrlMode
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InterfaceInsertNote
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidUpdateSendPrg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[95]"></a>LogicWlTestSendProc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = LogicWlTestSendProc &rArr; RfidMngWLTestSend &rArr; RfidTransformTx
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngWLTestSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[a3]"></a>LogicStatusRfidRecvPrgProc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[9e]"></a>LogicStatusRfidUnColibrateProc</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, logic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = LogicStatusRfidUnColibrateProc &rArr; RfidMngSendDataUnColibarate &rArr; RfidTransformTx
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RfidMngSendDataUnColibarate
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicRunInfApi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[9f]"></a>LogicStatusShutupProc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, logic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> logic.o(.data)
</UL>
<P><STRONG><a name="[f8]"></a>APPMng_Task</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = APPMng_Task &rArr; LogicInint &rArr; LogicParamInint &rArr; LogicParamSaveProc &rArr; EepromWriteBytes &rArr; OSMutexPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_Init
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LogicInint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[fa]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
