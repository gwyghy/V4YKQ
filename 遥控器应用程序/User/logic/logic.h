/********************************************************************************* 文件名：	Logic.h* 作者：	马如意   * 版本：   	V1.0* 日期：    2015.05.15  * 功能描述: 定义Logic.h头文件* 			*			* 修改说明：   **       >>>>  在工程中的位置  <<<<*             3-应用层*         √   2-协议层*             1-硬件驱动层********************************************************************************** @copy* <h2><center>&copy; COPYRIGHT 天津华宁电子有限公司 研发中心 软件部</center></h2>*********************************************************************************/#ifndef  __LOGIC_H__#define  __LOGIC_H__/********************************************************************************* .h头文件*********************************************************************************/#include "includes.h"#include "Battery.h"#include "IrMng.h"#include "RfidMng.h"#if (ONLINE_UPDATE_SELF_PRG_PT_FLAG	!=	DISABLED)	#include "Iapupdate.h"	#include "RfidUpdate.h"#endif/********************************************************************************* #define宏定义*********************************************************************************//*********所使用的函数定义***************/#define		LOGIC_PARAM_WRITE_BUF		EepromWriteBytes#define		LOGIC_PARAM_READ_BUF		EepromReadBytes#define		LOGIC_SEND_TIMES_MAX		512//设置发送次数的最大值#define		LOGIC_SEND_TIMES_MIN		1//设置发送次数的最小值#define		LOGIC_SEND_TIMEOUT_MAX		50000//设置超时的最大时间#define		LOGIC_SEND_TIMEOUT_MIN		10//设置超时的最小时间#define		LOGIC_SC_NUMB_MAX			255//架号最大值#define		LOGIC_SC_NUMB_MIN			1//架号最小值#define   WL_VERSION     6/**支架控制器(1~x)、服务器(255)、遥控器(红外:1~y,RFID:255-y)统一编址，暂定范围1~255**/#define 	SYSTEM_SS_ID				255	#define		YKQ_NUMBER_MAX				15//遥控器ID的最大值#define		YKQ_NUMBER_MIN				1//遥控器ID的最小值#define		IN_SC_SS_NUMB				510//支架控制器编号系统中，服务器的编号#define		BATTERY_SAMPLE_TIME_SET		1000//单位ms//zzw#define		GRP_CTRL_INIT_ARE		5			//成组控制初始范围5#define		GRP_CTRL_MAX_ARE		20			//成组控制最大范围20#define		GRP_CTRL_MIN_SPACE		2			//成组控制最小安全间隔1#define		NEIGBOR_CONTR_MAX		5			//隔架架数最大为5/**快捷键所支持的最大动作总数定义**/#if (QUICK_KEY_CTRL_ENABLE_FLAG	!= DISABLED)	#define		LOGIC_QUICK_ACTIONNUMB_MAX	10#endif/**可设动作键所支持的最大按键总数定义**/#define		LOGIC_KEYSET_ACTIONNUMB_MAX	24		//设定按键动作	2020.01.15 parry#if (ZIBAO_CTRL_ENABLE_FLAG != DISABLED)	#if (ZIBAO_CTRL_METHOD_TYPE == ZIBAO_PARAM_CTRL_METHOD)		#define		LOGIC_ZIBAO_ACTIONNUMB_MAX	32	#endif#endif#if (KEY_LED_TOGGLE_ENABLE_FLAG ==	ENABLED)	#define		KEY_DOWN_LEDON_TIME_SET			150	#define		KEY_DOWN_LEDOFF_TIME_SET		1200#endif/**参数类型**/__packed typedef struct{	u32 u32YKQPrgSec;//程序的随机号		u8 u8YKQNumber;//支架遥控器编号	u8 u8RfidSelfNumb;//RFID发射对应的编号	u16 u16IrSendTimeout;//Ir对码超时时间,ms			u16 u16IrSendTimes;//Ir对码次数,次		u16 u16RfidSendTimeout;//Rfid对码超时时间,ms		u16 u16RfidSendTimes;//Rfid对码次数,次		u16 u16OledScrLight;//oled屏亮度的参数		u16 u16OledProtectBrightness;//屏保时亮度	u16 u16SleepMode;//预留		u32 u32ColibareteTimeOut;//对码超时	u32 u32InterfaceControlTimer;//显示控制计时，,ms	u32 u32OledScrProtectedTimer;//休屏的时间设定,ms	u32 u32NoteShowTimer;//提示信息显示计时,ms	u32 u32OledShutdownTimer;//自动关机时间，ms	#if (QUICK_KEY_CTRL_ENABLE_FLAG	!= DISABLED)		#if (QUICK_KEY_1_ENABLE_FLAG != DISABLED)			/**快捷键1参数**/			u16 u16Quick1EnableFlag;			u16 u16Quick1ActionNumb;				u16 u16Quick1AlaramTimer;				u16 u16Quick1ActionName[LOGIC_QUICK_ACTIONNUMB_MAX];			u16 u16Quick1ActionStart[LOGIC_QUICK_ACTIONNUMB_MAX];//以0.1秒进行参数存储			u16 u16Quick1ActionIng[LOGIC_QUICK_ACTIONNUMB_MAX];		#endif		#if (QUICK_KEY_2_ENABLE_FLAG != DISABLED)			/**快捷键2参数**/			u16 u16Quick2EnableFlag;			u16 u16Quick2ActionNumb;				u16 u16Quick2AlaramTimer;				u16 u16Quick2ActionName[LOGIC_QUICK_ACTIONNUMB_MAX];			u16 u16Quick2ActionStart[LOGIC_QUICK_ACTIONNUMB_MAX];//以0.1秒进行参数存储			u16 u16Quick2ActionIng[LOGIC_QUICK_ACTIONNUMB_MAX];		#endif	#endif		/**与微型遥控器相关的参数***/	#if (SET_YKQ_PRGPT_USE_FLAG != DISABLED)		u16 u16ColibrateYkqId;		u16 u16ColibrateYkqType;			u16 u16ColibrateYkqAppStation;					const u8 u8ColibrateYkqVersion[9];	#endif	#if (ZIBAO_CTRL_ENABLE_FLAG != DISABLED)		u16 u16ZibaoEnableFlag;		u16 u16ZibaoActionMax;				#if (ZIBAO_CTRL_METHOD_TYPE == ZIBAO_PARAM_CTRL_METHOD)			u32 u32ZibaoTimeout;					u8 u8ZibaoActionEnabledFlag[LOGIC_ZIBAO_ACTIONNUMB_MAX];						u32 u32ZibaoActionDoingTime[LOGIC_ZIBAO_ACTIONNUMB_MAX];			#endif	#endif	#if IR_SEND > 0	u16 u16irsendstate ; 	#endif	u16 u16ScCtrlDisplayTime;//状态显示时间，主要用于返回本架控制状态	u16 u16FastColiearateEnable;//jhy    u8 WlSendTestEnable;        //无线测试使能参数	u16 u16Crc;//CRC校验值	u8 u8WLVersion[WL_VERSION];}LOGIC_PARAM_TYPE;/**逻辑层信息处理所使用的消息定义***/typedef enum{	/**参数读写相关**/	LOGIC_SET_PRG_SEC  = 0,//获取程序随机号	LOGIC_SET_YKQ_NUMBER,//获取支架遥控器编号	LOGIC_SET_RFID_NUMBER,//获取支架遥控器编号		LOGIC_SET_IR_TINMEOUT,//获取Ir对码超时时间,ms		LOGIC_SET_IR_SENDTIMES,//获取Ir对码次数,次	LOGIC_SET_RFID_TINMEOUT,//获取RFID超时时间,ms		LOGIC_SET_RFID_SENDTIMES,//获取RFID次数,次	LOGIC_SET_OLED_SCR_LIGHT,//获取oled屏亮度的参数		LOGIC_SET_OLED_PROTECT_BRIGHTNESS,//获取屏保时亮度	LOGIC_SET_OLED_PROTECTED_TIMER,//设置屏保定时		LOGIC_SET_OLED_AUTOSHUTDOWN_TIMER,//设置自动关机时间	LOGIC_SET_COLIBARETE_TIMEOUT,//设置对码超时	LOGIC_SET_INTER_CONTROL_TIMER,//设置主控计时	LOGIC_SET_NOTE_SHOW_TIMER,//设置屏保定时	LOGIC_SET_SC_CTRL_DISPALY_TIMER,//状态显示时间，主要用于返回本架控制状态	LOGIC_SET_YKQ_NUMBER_BACKUP,//设置ID备份	LOGIC_SET_SHUTDOWM_FLAG,//设置关机标志		LOGIC_SET_BATTERY_ACR_BACKUP,//设置电池电量备份数值	LOGIC_SET_BATTERY_COULDATA_BACKUP,//设置关机标志		LOGIC_SET_BATTERY_VOLTAGE_BACKUP,//设置电池电压的备份数值	LOGIC_SET_BATTERY_INCHARGE_TIMER,//设置电池电压充电计时器		#if (QUICK_KEY_CTRL_ENABLE_FLAG	!= DISABLED)		#if (QUICK_KEY_1_ENABLE_FLAG != DISABLED)				/**快捷键1参数**/			LOGIC_SET_QUICK1_ENABLE_FLAG,			LOGIC_SET_QUICK1_ACTION_NUMB,			LOGIC_SET_QUICK1_ALARAM_TIMER,			LOGIC_SET_QUICK1_ACTIONNAME_1,			LOGIC_SET_QUICK1_ACTIONNAME_2,			LOGIC_SET_QUICK1_ACTIONNAME_3,			LOGIC_SET_QUICK1_ACTIONNAME_4,			LOGIC_SET_QUICK1_ACTIONNAME_5,				LOGIC_SET_QUICK1_ACTIONNAME_6,			LOGIC_SET_QUICK1_ACTIONNAME_7,			LOGIC_SET_QUICK1_ACTIONNAME_8,			LOGIC_SET_QUICK1_ACTIONNAME_9,			LOGIC_SET_QUICK1_ACTIONNAME_10,				LOGIC_SET_QUICK1_ACTIONTIME_1,			LOGIC_SET_QUICK1_ACTIONTIME_2,			LOGIC_SET_QUICK1_ACTIONTIME_3,			LOGIC_SET_QUICK1_ACTIONTIME_4,			LOGIC_SET_QUICK1_ACTIONTIME_5,				LOGIC_SET_QUICK1_ACTIONTIME_6,			LOGIC_SET_QUICK1_ACTIONTIME_7,			LOGIC_SET_QUICK1_ACTIONTIME_8,			LOGIC_SET_QUICK1_ACTIONTIME_9,			LOGIC_SET_QUICK1_ACTIONTIME_10,				LOGIC_SET_QUICK1_ACTIONINTERVAL_1,			LOGIC_SET_QUICK1_ACTIONINTERVAL_2,			LOGIC_SET_QUICK1_ACTIONINTERVAL_3,			LOGIC_SET_QUICK1_ACTIONINTERVAL_4,			LOGIC_SET_QUICK1_ACTIONINTERVAL_5,				LOGIC_SET_QUICK1_ACTIONINTERVAL_6,			LOGIC_SET_QUICK1_ACTIONINTERVAL_7,			LOGIC_SET_QUICK1_ACTIONINTERVAL_8,			LOGIC_SET_QUICK1_ACTIONINTERVAL_9,			LOGIC_SET_QUICK1_ACTIONINTERVAL_10,				#endif		#if (QUICK_KEY_2_ENABLE_FLAG != DISABLED)				/**快捷键2参数**/				LOGIC_SET_QUICK2_ENABLE_FLAG,			LOGIC_SET_QUICK2_ACTION_NUMB,			LOGIC_SET_QUICK2_ALARAM_TIMER,			LOGIC_SET_QUICK2_ACTIONNAME_1,			LOGIC_SET_QUICK2_ACTIONNAME_2,			LOGIC_SET_QUICK2_ACTIONNAME_3,			LOGIC_SET_QUICK2_ACTIONNAME_4,			LOGIC_SET_QUICK2_ACTIONNAME_5,				LOGIC_SET_QUICK2_ACTIONNAME_6,			LOGIC_SET_QUICK2_ACTIONNAME_7,			LOGIC_SET_QUICK2_ACTIONNAME_8,			LOGIC_SET_QUICK2_ACTIONNAME_9,			LOGIC_SET_QUICK2_ACTIONNAME_10,				LOGIC_SET_QUICK2_ACTIONTIME_1,			LOGIC_SET_QUICK2_ACTIONTIME_2,			LOGIC_SET_QUICK2_ACTIONTIME_3,			LOGIC_SET_QUICK2_ACTIONTIME_4,			LOGIC_SET_QUICK2_ACTIONTIME_5,				LOGIC_SET_QUICK2_ACTIONTIME_6,			LOGIC_SET_QUICK2_ACTIONTIME_7,			LOGIC_SET_QUICK2_ACTIONTIME_8,			LOGIC_SET_QUICK2_ACTIONTIME_9,			LOGIC_SET_QUICK2_ACTIONTIME_10,				LOGIC_SET_QUICK2_ACTIONINTERVAL_1,			LOGIC_SET_QUICK2_ACTIONINTERVAL_2,			LOGIC_SET_QUICK2_ACTIONINTERVAL_3,			LOGIC_SET_QUICK2_ACTIONINTERVAL_4,			LOGIC_SET_QUICK2_ACTIONINTERVAL_5,				LOGIC_SET_QUICK2_ACTIONINTERVAL_6,			LOGIC_SET_QUICK2_ACTIONINTERVAL_7,			LOGIC_SET_QUICK2_ACTIONINTERVAL_8,			LOGIC_SET_QUICK2_ACTIONINTERVAL_9,			LOGIC_SET_QUICK2_ACTIONINTERVAL_10,				#endif	#endif		#if (SET_YKQ_PRGPT_USE_FLAG != DISABLED)		LOGIC_SET_COLIBRATE_YKQ_ID,		LOGIC_SET_COLIBRATE_YKQ_TYPE,		LOGIC_SET_COLIBRATE_YKQ_STATION,					LOGIC_SET_COLIBRATE_YKQ_VERSION,	#endif	/**自保模式**/	#if (ZIBAO_CTRL_ENABLE_FLAG != DISABLED)		LOGIC_SET_ZIBAO_ENABLE_FLAG,		LOGIC_SET_ZIBAO_ACTION_MAX,		#if (ZIBAO_CTRL_METHOD_TYPE	== ZIBAO_PARAM_CTRL_METHOD)//自保动作使能设置			LOGIC_SET_ZIBAO_TIMEOUT,//自保超时时间设置			LOGIC_SET_SHENGZHU_ENABLE_FLAG,			LOGIC_SET_JIANGZHU_ENABLE_FLAG,			LOGIC_SET_TUILIU_ENABLE_FLAG,			LOGIC_SET_YIJIA_ENABLE_FLAG,						LOGIC_SET_SHENSHENSUOLIANG_ENABLE_FLAG,			LOGIC_SET_SHOUSHENSUOLIANG_ENABLE_FLAG,			LOGIC_SET_SHENPINGHENG_ENABLE_FLAG,			LOGIC_SET_SHOUPINGHENG_ENABLE_FLAG,			LOGIC_SET_SHENHUBANG_ENABLE_FLAG,			LOGIC_SET_SHOUHUBANG_ENABLE_FLAG,			LOGIC_SET_SHENCEHU_ENABLE_FLAG,			LOGIC_SET_SHOUCEHU_ENABLE_FLAG,			LOGIC_SET_TAIDIZUO_ENABLE_FLAG,			LOGIC_SET_JIANGDIZUO_ENABLE_FLAG,			LOGIC_SET_SHENHUBANG2_ENABLE_FLAG,			LOGIC_SET_SHOUHUBANG2_ENABLE_FLAG,					LOGIC_SET_WEILIANGSHANGBAI_ENABLE_FLAG,			LOGIC_SET_WEILIANGXIABAI_ENABLE_FLAG,			LOGIC_SET_SHENCHABAN_ENABLE_FLAG,			LOGIC_SET_SHOUCHABAN_ENABLE_FLAG,			LOGIC_SET_SHENGHOUZHU_ENABLE_FLAG,			LOGIC_SET_JIANGHOUZHU_ENABLE_FLAG,			LOGIC_SET_DINGLIANGPENWU_ENABLE_FLAG,			LOGIC_SET_JIDAOPENWU_ENABLE_FLAG,							LOGIC_SET_FANGMEIPENWU_ENABLE_FLAG,			LOGIC_SET_LAHOULIU_ENABLE_FLAG,			LOGIC_SET_SHENDITIAO_ENABLE_FLAG,			LOGIC_SET_SHOUDITIAO_ENABLE_FLAG,									LOGIC_SET_QIANLIANGSHANGBAI_ENABLE_FLAG,			LOGIC_SET_QIANLIANGXIABAI_ENABLE_FLAG,		#endif				#if (ZIBAO_CTRL_METHOD_TYPE	== ZIBAO_PARAM_CTRL_METHOD)//自保动作时间设置			LOGIC_SET_SHENGZHU_DOING_TIME,			LOGIC_SET_JIANGZHU_DOING_TIME,			LOGIC_SET_TUILIU_DOING_TIME,			LOGIC_SET_YIJIA_DOING_TIME,			LOGIC_SET_SHENSHENSUOLIANG_DOING_TIME,			LOGIC_SET_SHOUSHENSUOLIANG_DOING_TIME,			LOGIC_SET_SHENPINGHENG_DOING_TIME,			LOGIC_SET_SHOUPINGHENG_DOING_TIME,			LOGIC_SET_SHENHUBANG_DOING_TIME,			LOGIC_SET_SHOUHUBANG_DOING_TIME,			LOGIC_SET_SHENCEHU_DOING_TIME,			LOGIC_SET_SHOUCEHU_DOING_TIME,			LOGIC_SET_TAIDIZUO_DOING_TIME,			LOGIC_SET_JIANGDIZUO_DOING_TIME,			LOGIC_SET_SHENHUBANG2_DOING_TIME,			LOGIC_SET_SHOUHUBANG2_DOING_TIME,					LOGIC_SET_WEILIANGSHANGBAI_DOING_TIME,			LOGIC_SET_WEILIANGXIABAI_DOING_TIME,			LOGIC_SET_SHENCHABAN_DOING_TIME,			LOGIC_SET_SHOUCHABAN_DOING_TIME,			LOGIC_SET_SHENGHOUZHU_DOING_TIME,			LOGIC_SET_JIANGHOUZHU_DOING_TIME,			LOGIC_SET_DINGLIANGPENWU_DOING_TIME,			LOGIC_SET_JIDAOPENWU_DOING_TIME,			LOGIC_SET_FANGMEIPENWU_DOING_TIME,			LOGIC_SET_LAHOULIU_DOING_TIME,			LOGIC_SET_SHENDITIAO_DOING_TIME,			LOGIC_SET_SHOUDITIAO_DOING_TIME,			LOGIC_SET_QIANLIANGSHANGBAI_DOING_TIME,			LOGIC_SET_QIANLIANGXIABAI_DOING_TIME,		#endif			#endif		#if (ONLINE_UPDATE_SELF_PRG_PT_FLAG	!= DISABLED)		LOGIC_UPDATE_YKQ_PRG,//更新遥控器程序		LOGIC_UPDATE_CHENGXUABNG_PRG, //程序棒更新		LOGIC_UPDATE_WL_PRG,		LOGIC_UPDATE_CHENGXUABNG_WL_PRG, //程序棒更新	#endif		/**获取参数****/	LOGIC_GET_PRG_SEC,//获取程序随机号	LOGIC_GET_YKQ_NUMBER,//获取支架遥控器编号	LOGIC_GET_RFID_NUMBER,//获取支架遥控器发射RFID时对应的编号		LOGIC_GET_IR_TINMEOUT,//获取Ir对码超时时间,ms		LOGIC_GET_IR_SENDTIMES,//获取Ir对码次数,次	LOGIC_GET_RFID_TINMEOUT,//获取RFID超时时间,ms		LOGIC_GET_RFID_SENDTIMES,//获取RFID次数,次	LOGIC_GET_OLED_SCR_LIGHT,//获取oled屏亮度的参数		LOGIC_GET_OLED_PROTECT_BRIGHTNESS,//获取屏保时亮度	LOGIC_GET_OLED_PROTECTED_TIMER,//获取屏屏保定时		LOGIC_GET_OLED_AUTOSHUTDOWN_TIMER,//获取自动关机时间		LOGIC_GET_COLIBARETE_TIMEOUT,//获取对码超时	LOGIC_GET_INTER_CONTROL_TIMER,//设置主控计时	LOGIC_GET_NOTE_SHOW_TIMER,//获取屏屏保定时	LOGIC_GET_SC_CTRL_DISPALY_TIMER,//状态显示时间，主要用于返回本架控制状态		LOGIC_GET_YKQ_NUMBER_BACKUP,//读取备份ID	LOGIC_GET_SHUTDOWM_FLAG,//读取关机标志		LOGIC_GET_BATTERY_ACR_BACKUP,//读取电池电量备份数值	LOGIC_GET_BATTERY_COULDATA_BACKUP,//读取关机标志		LOGIC_GET_BATTERY_VOLTAGE_BACKUP,//读取电池电压的备份数值	LOGIC_GET_BATTERY_INCHARGE_TIMER,//读取电池电压充电计时器	#if (QUICK_KEY_CTRL_ENABLE_FLAG	!= DISABLED)		#if (QUICK_KEY_1_ENABLE_FLAG != DISABLED)				/**快捷键1参数**/			LOGIC_GET_QUICK1_ENABLE_FLAG,			LOGIC_GET_QUICK1_ACTION_NUMB,			LOGIC_GET_QUICK1_ALARAM_TIMER,			LOGIC_GET_QUICK1_ACTIONNAME_1,			LOGIC_GET_QUICK1_ACTIONNAME_2,			LOGIC_GET_QUICK1_ACTIONNAME_3,			LOGIC_GET_QUICK1_ACTIONNAME_4,			LOGIC_GET_QUICK1_ACTIONNAME_5,				LOGIC_GET_QUICK1_ACTIONNAME_6,			LOGIC_GET_QUICK1_ACTIONNAME_7,			LOGIC_GET_QUICK1_ACTIONNAME_8,			LOGIC_GET_QUICK1_ACTIONNAME_9,			LOGIC_GET_QUICK1_ACTIONNAME_10,				LOGIC_GET_QUICK1_ACTIONTIME_1,			LOGIC_GET_QUICK1_ACTIONTIME_2,			LOGIC_GET_QUICK1_ACTIONTIME_3,			LOGIC_GET_QUICK1_ACTIONTIME_4,			LOGIC_GET_QUICK1_ACTIONTIME_5,				LOGIC_GET_QUICK1_ACTIONTIME_6,			LOGIC_GET_QUICK1_ACTIONTIME_7,			LOGIC_GET_QUICK1_ACTIONTIME_8,			LOGIC_GET_QUICK1_ACTIONTIME_9,			LOGIC_GET_QUICK1_ACTIONTIME_10,				LOGIC_GET_QUICK1_ACTIONINTERVAL_1,			LOGIC_GET_QUICK1_ACTIONINTERVAL_2,			LOGIC_GET_QUICK1_ACTIONINTERVAL_3,			LOGIC_GET_QUICK1_ACTIONINTERVAL_4,			LOGIC_GET_QUICK1_ACTIONINTERVAL_5,				LOGIC_GET_QUICK1_ACTIONINTERVAL_6,			LOGIC_GET_QUICK1_ACTIONINTERVAL_7,			LOGIC_GET_QUICK1_ACTIONINTERVAL_8,			LOGIC_GET_QUICK1_ACTIONINTERVAL_9,			LOGIC_GET_QUICK1_ACTIONINTERVAL_10,				#endif		#if (QUICK_KEY_2_ENABLE_FLAG != DISABLED)				/**快捷键2参数**/				LOGIC_GET_QUICK2_ENABLE_FLAG,			LOGIC_GET_QUICK2_ACTION_NUMB,			LOGIC_GET_QUICK2_ALARAM_TIMER,			LOGIC_GET_QUICK2_ACTIONNAME_1,			LOGIC_GET_QUICK2_ACTIONNAME_2,			LOGIC_GET_QUICK2_ACTIONNAME_3,			LOGIC_GET_QUICK2_ACTIONNAME_4,			LOGIC_GET_QUICK2_ACTIONNAME_5,				LOGIC_GET_QUICK2_ACTIONNAME_6,			LOGIC_GET_QUICK2_ACTIONNAME_7,			LOGIC_GET_QUICK2_ACTIONNAME_8,			LOGIC_GET_QUICK2_ACTIONNAME_9,			LOGIC_GET_QUICK2_ACTIONNAME_10,				LOGIC_GET_QUICK2_ACTIONTIME_1,			LOGIC_GET_QUICK2_ACTIONTIME_2,			LOGIC_GET_QUICK2_ACTIONTIME_3,			LOGIC_GET_QUICK2_ACTIONTIME_4,			LOGIC_GET_QUICK2_ACTIONTIME_5,				LOGIC_GET_QUICK2_ACTIONTIME_6,			LOGIC_GET_QUICK2_ACTIONTIME_7,			LOGIC_GET_QUICK2_ACTIONTIME_8,			LOGIC_GET_QUICK2_ACTIONTIME_9,			LOGIC_GET_QUICK2_ACTIONTIME_10,				LOGIC_GET_QUICK2_ACTIONINTERVAL_1,			LOGIC_GET_QUICK2_ACTIONINTERVAL_2,			LOGIC_GET_QUICK2_ACTIONINTERVAL_3,			LOGIC_GET_QUICK2_ACTIONINTERVAL_4,			LOGIC_GET_QUICK2_ACTIONINTERVAL_5,				LOGIC_GET_QUICK2_ACTIONINTERVAL_6,			LOGIC_GET_QUICK2_ACTIONINTERVAL_7,			LOGIC_GET_QUICK2_ACTIONINTERVAL_8,			LOGIC_GET_QUICK2_ACTIONINTERVAL_9,			LOGIC_GET_QUICK2_ACTIONINTERVAL_10,				#endif	#endif	#if (QUICK_KEY_CTRL_ENABLE_FLAG	!= DISABLED)		#if (QUICK_KEY_1_ENABLE_FLAG != DISABLED)			LOGIC_GET_QUICK1_ACTION_VAILD,//获得快捷动作是否有效			LOGIC_GET_QUICK2_ACTION_VAILD,//获得快捷动作是否有效		#endif	#endif		LOGIC_GET_YKQ_APP_STATION,//获取本遥控器应用的场合		LOGIC_RESUME_DEAULT_PARAM,//恢复默认参数	#if IR_SEND > 0	LOGIC_IR_SEND_TEST,//红外发射测试	LOGIC_GET_IR_SEND_TEST,	#endif	#if (SET_YKQ_PRGPT_USE_FLAG != DISABLED)		LOGIC_GET_COLIBRATE_YKQ_ID,		LOGIC_GET_COLIBRATE_YKQ_TYPE,		LOGIC_GET_COLIBRATE_YKQ_STATION,					LOGIC_GET_COLIBRATE_YKQ_VERSION,	#endif	#if (ZIBAO_CTRL_ENABLE_FLAG != DISABLED)		LOGIC_GET_ZIBAO_ENABLE_FLAG,		LOGIC_GET_ZIBAO_ACTION_MAX,		#if (ZIBAO_CTRL_METHOD_TYPE	== ZIBAO_PARAM_CTRL_METHOD)//自保动作使能回读			LOGIC_GET_ZIBAO_TIMEOUT,//自保超时时间设置						LOGIC_GET_SHENGZHU_ENABLE_FLAG,			LOGIC_GET_JIANGZHU_ENABLE_FLAG,			LOGIC_GET_TUILIU_ENABLE_FLAG,			LOGIC_GET_YIJIA_ENABLE_FLAG,				LOGIC_GET_SHENSHENSUOLIANG_ENABLE_FLAG,			LOGIC_GET_SHOUSHENSUOLIANG_ENABLE_FLAG,			LOGIC_GET_SHENPINGHENG_ENABLE_FLAG,			LOGIC_GET_SHOUPINGHENG_ENABLE_FLAG,			LOGIC_GET_SHENHUBANG_ENABLE_FLAG,			LOGIC_GET_SHOUHUBANG_ENABLE_FLAG,			LOGIC_GET_SHENCEHU_ENABLE_FLAG,			LOGIC_GET_SHOUCEHU_ENABLE_FLAG,			LOGIC_GET_TAIDIZUO_ENABLE_FLAG,			LOGIC_GET_JIANGDIZUO_ENABLE_FLAG,			LOGIC_GET_SHENHUBANG2_ENABLE_FLAG,			LOGIC_GET_SHOUHUBANG2_ENABLE_FLAG,					LOGIC_GET_WEILIANGSHANGBAI_ENABLE_FLAG,			LOGIC_GET_WEILIANGXIABAI_ENABLE_FLAG,			LOGIC_GET_SHENCHABAN_ENABLE_FLAG,			LOGIC_GET_SHOUCHABAN_ENABLE_FLAG,			LOGIC_GET_SHENGHOUZHU_ENABLE_FLAG,			LOGIC_GET_JIANGHOUZHU_ENABLE_FLAG,			LOGIC_GET_DINGLIANGPENWU_ENABLE_FLAG,			LOGIC_GET_JIDAOPENWU_ENABLE_FLAG,			LOGIC_GET_FANGMEIPENWU_ENABLE_FLAG,			LOGIC_GET_LAHOULIU_ENABLE_FLAG,			LOGIC_GET_SHENDITIAO_ENABLE_FLAG,			LOGIC_GET_SHOUDITIAO_ENABLE_FLAG,			LOGIC_GET_QIANLIANGSHANGBAI_ENABLE_FLAG,			LOGIC_GET_QIANLIANGXIABAI_ENABLE_FLAG,		#endif		#if (ZIBAO_CTRL_METHOD_TYPE	== ZIBAO_PARAM_CTRL_METHOD)//自保动作时间回读			LOGIC_GET_SHENGZHU_DOING_TIME,			LOGIC_GET_JIANGZHU_DOING_TIME,			LOGIC_GET_TUILIU_DOING_TIME,			LOGIC_GET_YIJIA_DOING_TIME,			LOGIC_GET_SHENSHENSUOLIANG_DOING_TIME,			LOGIC_GET_SHOUSHENSUOLIANG_DOING_TIME,			LOGIC_GET_SHENPINGHENG_DOING_TIME,			LOGIC_GET_SHOUPINGHENG_DOING_TIME,			LOGIC_GET_SHENHUBANG_DOING_TIME,			LOGIC_GET_SHOUHUBANG_DOING_TIME,			LOGIC_GET_SHENCEHU_DOING_TIME,			LOGIC_GET_SHOUCEHU_DOING_TIME,			LOGIC_GET_TAIDIZUO_DOING_TIME,			LOGIC_GET_JIANGDIZUO_DOING_TIME,			LOGIC_GET_SHENHUBANG2_DOING_TIME,			LOGIC_GET_SHOUHUBANG2_DOING_TIME,					LOGIC_GET_WEILIANGSHANGBAI_DOING_TIME,			LOGIC_GET_WEILIANGXIABAI_DOING_TIME,			LOGIC_GET_SHENCHABAN_DOING_TIME,			LOGIC_GET_SHOUCHABAN_DOING_TIME,			LOGIC_GET_SHENGHOUZHU_DOING_TIME,			LOGIC_GET_JIANGHOUZHU_DOING_TIME,			LOGIC_GET_DINGLIANGPENWU_DOING_TIME,			LOGIC_GET_JIDAOPENWU_DOING_TIME,			LOGIC_GET_FANGMEIPENWU_DOING_TIME,			LOGIC_GET_LAHOULIU_DOING_TIME,			LOGIC_GET_SHENDITIAO_DOING_TIME,			LOGIC_GET_SHOUDITIAO_DOING_TIME,			LOGIC_GET_QIANLIANGSHANGBAI_DOING_TIME,			LOGIC_GET_QIANLIANGXIABAI_DOING_TIME,		#endif			#endif//	LOGIC_GET_KEYFILM_NAME,//	LOGIC_SET_KEYFILM_NAME,		LOGIC_GET_FASTCOLIBARATE_ENABLE,   //jhy	LOGIC_SET_FASTCOLIBARATE_ENABLE,    //jhy		LOGIC_SET_WL_VERSION,//获取无线模块版本号	LOGIC_GET_WL_VERSION,//获取无线模块版本号		LOGIC_GET_BATTERY_VOLTAGE1,	LOGIC_GET_BATTERY_VOLTAGE2,		LOGIC_SET_CTRL_MODE,	//设置控制方式			zzw	LOGIC_GET_CTRL_MODE,	//获取遥控器控制模式		0：手动	1：自动				zzw	LOGIC_GET_WL_TEST_ENABLE,   //无线测试    LOGIC_SET_WL_TEST_ENABLE,	LOGIC_PARAM_MSG_MAX//逻辑层处理消息的最大值}LOGIC_PARAM_MSG_TYPE;/**逻辑层信息处理所使用的消息定义***/typedef enum{	/**运行相关信息读写相关**/	LOGIC_SET_COLIBRATE_SC_TYPE = 0,//进行对码方式，SHIFT或+-键	LOGIC_SET_SC_NUMB_ADD_DIRCT ,//编号增向		LOGIC_SET_COLIBRATE_SC_NUMB,//对码架号	LOGIC_SET_CONTRL_SC_NUMB,//控制架的架号	LOGIC_SET_RFID_FRAME_TYPE,	LOGIC_SET_SC_ACTION_NAME,	LOGIC_SET_GRP_ACTION_DIRECTION,	//执行方向	LOGIC_SET_GRP_ACK_ACTION_NAME,	//成组动作名	LOGIC_SET_GRP_NEAR_SC_NUMB,		//成组近端架号	LOGIC_SET_GRP_REMOTE_SC_NUMB,	//成组远端架号		LOGIC_SET_RUN_STATUS,//设置运行状态			LOGIC_SET_BUTTON_VALUE,//按下	LOGIC_SET_BUTTON_ACK_VALUE,//按下的应答	LOGIC_SET_BUTTON_ACCEPT_STATUS,//按键接收状态		LOGIC_SET_BUTTON_LONG_VALUE,//按键长按	LOGIC_SET_BUTTON_UP,//按键抬起	LOGIC_SET_SC_ACTION_TYPE,//SC控制类型	LOGIC_SET_SC_GEJIA_NUMBER,//SC隔架架数	#if (QUICK_KEY_CTRL_ENABLE_FLAG != 0)		LOGIC_SET_SC_QUICK_TYPE,//SC快捷动作类型	#endif		LOGIC_SET_BATTERY_STATUS,//设置电池的状态	LOGIC_SET_BATTERY_COULOM_STATUS,//设置电池状态的状态	LOGIC_SET_BATTERY_COULOM_DATA,//设置电池电量数值	LOGIC_SET_RFID_SIGNAL_STATUS,		#if (KEY_AUTO_PRESS_PROC_FLAG != DISABLED)		LOGIC_SET_AUTOPRESS_ENABLE_FLAG,//设置自动补压开关标志	#endif		/**以下为读取**/	LOGIC_GET_COLIBRATE_SC_TYPE,//进行对码方式，SHIFT或+-键	LOGIC_GET_SC_NUMB_ADD_DIRCT,//读取架号增向	LOGIC_GET_CONLIBRATE_SC_NUMB,//读取对码的支架控制器编号	LOGIC_GET_CONTRL_SC_NUMB,//控制架的架号	LOGIC_GET_RFID_FRAME_TYPE,	LOGIC_GET_SC_ACTION_NAME,	LOGIC_GET_GRP_ACTION_DIRECTION,		//成组执行方向	LOGIC_GET_GRP_ACK_ACTION_NAME,		//成组动作名	LOGIC_GET_GRP_NEAR_SC_NUMB,			//成组近端架号	LOGIC_GET_GRP_REMOTE_SC_NUMB,		//成组远端架号		LOGIC_GET_RUN_STATUS,//读取运行状态		LOGIC_GET_BUTTON_VALUE,	LOGIC_GET_BUTTON_ACK_VALUE,	LOGIC_GET_BUTTON_ACCEPT_STATUS,//按键接收状态	LOGIC_GET_BUTTON_LONG_VALUE,	LOGIC_GET_BUTTON_UP,//按键抬起	LOGIC_GET_SC_ACTION_TYPE,//SC控制类型	LOGIC_GET_SC_GEJIA_NUMBER,//SC隔架架数	#if (QUICK_KEY_CTRL_ENABLE_FLAG != 0)		LOGIC_GET_SC_QUICK_TYPE,//SC快捷动作类型	#endif		LOGIC_GET_BATTERY_STATUS,//读取电池的状态	LOGIC_GET_BATTERY_COULOM_STATUS,//读取电池状态的状态	LOGIC_GET_BATTERY_COULOM_DATA,//读取电池具体数值	LOGIC_GET_RFID_SIGNAL_STATUS,		LOGIC_SET_CONLIBRATE_SUCCESS_SC_NUMB,	LOGIC_GET_CONLIBRATE_SUCCESS_SC_NUMB,	LOGIG_SET_ACTIONINFO_CRC_IDENCAL,		//设置配置文件CRC是否一致	LOGIG_GET_ACTIONINFO_CRC_IDENCAL,		//读取配置文件CRC是否一致	LOGIC_SYNCHRO_ACTION_INFO,					//配置文件同步请求	zzw	LOGIC_SET_HEART,					//心跳	LOGIC_SET_NEAR_CTRL_REQ,			//邻架控制请求    LOGIC_WL_TEST_SEND_PROC,            //无线测试发送	LOGIC_RUN_MSG_MAX//逻辑层处理消息的最大值	}LOGIC_RUN_MSG_TYPE;/**遥控器控制方式**/		//zzwtypedef enum{	MANUAL_CTRL ,			//手动控制	AUTO_CTRL,				//自动控制	NO_CTRL = 0xff,			//不在控制模式}LOGIC_RUN_CTRL_MODE;/**遥控器关机标志**/enum{	YKQ_SHUTDOWN_NO_SLEEP = 0x00,	YKQ_SHUTDOWN_SLEEP_WAKEUP1 = 0x01,//充电可唤醒	YKQ_SHUTDOWN_SLEEP_WAKEUP2 = 0x02,//关机键可唤醒	YKQ_SHUTDOWN_INCHARGE_TURNON = 0x04,//正常充电情况下，关机。进行休眠显示	YKQ_SHUTDOWN_INCHARGE_TURNDOWN = 0x08,//休眠充电情况下，进行关机，直接关闭。	YKQ_SHUTDOWN_WORK_TURNON = 0x10,//休眠充电情况下，进行开机。进行正常显示。		YKQ_SHUTDOWN_SLEEP_IWDG = 0x20};/**架号增向枚举**/enum{	SC_DIRCT_LEFT = 0,	SC_DIRCT_RIGHT = 1,	SC_DIRCT_MAX = 2};/**遥控器类型枚举**/enum{	YKQ_ALL_FUNCTION = 0,	YKQ_SIMPLE_FUNCTION = 1	};	/**成组执行方向枚举**/typedef enum{	SC_GRP_ACTION_NEAR_REMOTE = 0 ,	SC_GRP_ACTION_REMOTE_NEAR ,		SC_GRP_ACTION_DIRCTION_MAX}SC_GRP_DIRECTION_TYPE;/**运行状态枚举**/typedef enum{	LOGIC_STATUS_IDLE = 0,//空闲状态		LOGIC_STATUS_IR_COLIBARAE_START,//红外对码开始	LOGIC_STATUS_IR_COLIBARAE_ING,//等待对码结果过程中	LOGIC_STATUS_IR_COLIBARAE_SUCCESS,//红外对码成功	LOGIC_STATUS_IR_COLIBARAE_FAIL,//红外对码失败		LOGIC_STATUS_RFID_COLIBARAE_START,	//RFID对码中	LOGIC_STATUS_RFID_COLIBARAE_ING,//等待对码结果过程中	LOGIC_STATUS_RFID_COLIBARAE_SUCCESS,//RFID对码成功	LOGIC_STATUS_RFID_COLIBARAE_FAIL,	//RFID对码失败	LOGIC_STATUS_RFID_SC_SET,//菜单	LOGIC_STATUS_RFID_SC_SELF_CONTROL,//本架动作		LOGIC_STATUS_RFID_SC_NEIGHBORL,//邻架动作		LOGIC_STATUS_RFID_SC_GRP,//成组动作	#if (ZIBAO_CTRL_ENABLE_FLAG	!= DISABLED)		LOGIC_STATUS_RFID_SC_ZIBAO_CONTROL,//本架自保动作	#endif		#if (QUICK_KEY_CTRL_ENABLE_FLAG != DISABLED)		LOGIC_STATUS_RFID_SC_QUICK_CTRL,//支架控制器快捷动作	#endif		#if (SET_YKQ_PRGPT_USE_FLAG != DISABLED)		LOGIC_STATUS_IR_SEARCH_YQK_START,//开始搜索遥控器			LOGIC_STATUS_IR_SEARCH_YQK_ING,//正在搜索设备	#endif		LOGIC_STATUS_RFID_UNCOLIBRATE,//解除对码	LOGIC_STATUS_SHUTUP,//关机	LOGIC_STATUS_ININT,//初始化状态	#if (ONLINE_UPDATE_SELF_PRG_PT_FLAG	!= DISABLED)		LOGIC_STAUTS_RFID_TRANS_PRG0,                  //传输主控程序前的校验		LOGIC_STATUS_RFID_TRANS_PRG,//发送程序代码     //传输主控程序		LOGIC_STATUS_RFID_RECV_PRG,//接收程序代码      //接收主控程序		LOGIC_STATUS_RFID_TRANS_WL_PRG,                //传输无线程序（全面）		LOGIC_STATUS_USART_TRANS_WL_PRG,               //传输本地程序（本地）		LOGIC_STATUS_RFID_CXB_RECV_PRG,                //程序棒接收程序		LOGIC_STATUS_RFID_CXB_RECV_WL_PRG,             //程序棒接收无线程序		LOGIC_STATUS_RFID_RECV_WL_PRG,                 //接收无线程序		#endif                                                                                           	LOGIC_STATUS_UNCONNECT_WL,                       //无线断开逻辑处理	LOGIC_STATUS_ACTION_MESS_REQ,					//配置文件请求	LOGIC_STATUS_MAX}LOGIC_RUN_STATUS_TYPE;/**按键接收与否**/typedef enum{	SC_BUTTON_ACK_NONE = 0,//按键应答字无效状态	SC_BUTTON_ACK_ACCEPT,//按键接受(SC应答字)	SC_BUTTON_ACK_REJECT,//按键拒绝(SC应答字)	SC_BUTTON_ACK_TIMEOUT,//无应答	SC_BUTTON_ACK_MAX}SC_BUTTON_TYPE;/**邻隔架控制类型枚举**/enum{	SC_ACTION_SELF_CTRL = 0x00,//本架操作	SC_ACTION_LEFT_CTRL = 0x01,//左邻架操作	SC_ACTION_RIGHT_CTRL = 0x02//右邻架操作};/**对码方式枚举***/enum{	LOGIC_COLIBRATE_SC_NONE = 0 ,//经过+-键直接对码(无线)	LOGIC_COLIBRATE_SC_SHIFT_BUTTON ,//经过Shift	或类似方式进行对码(红外、无线)	LOGIC_COLIBRATE_SC_INCREASE_DECREASE ,//经过+-键直接对码(无线)	LOGIC_COLIBRATE_SC_IGNORE,//忽略	LOGIC_COLIBRATE_SC_TYPE_MAX};	#if (QUICK_KEY_CTRL_ENABLE_FLAG != 0)	/****快捷动作类型枚举****/	enum	{		SC_ACTION_QUICK_NONE = 0x00,//无快捷动作		SC_ACTION_QUICK_1,//快捷动作1		SC_ACTION_QUICK_2,//快捷动作2		SC_ACTION_QUICK_STOP,//快捷动作停止		SC_ACTION_QUICK_DONE,//动作已完成		SC_ACTION_QUICK_MAX	};#endif#if (ONLINE_UPDATE_SELF_PRG_PT_FLAG != DISABLED)	enum	{		YKQ_UPDATE_PRG_SELF = 0x00,//本地更新		YKQ_UPDATE_PRG_ALL,//全面更新	};#endif	#if IR_SEND > 0	enum	{		IR_SEND_ON = 0x00,//本地更新		IR_SEND_OFF,//全面更新	};#endif	//zzw__packed typedef struct{	__packed union	{		__packed struct			//动作类型		{			u8 ActionType:3;	//设备类型			u8 CtrlMode:1;		//控制模式		}Type;					u8 type;	}ActionType;	u8 ActionID;			//动作ID	u8 OrderActionOrResult;	//控制命令字或执行结果}COMMAND_ACTION;//控制命令字enum{		ACTION_INNEDIATELY_START = 0,	//立即启动	ACTION_STOP,					//停止	ACTION_DELAY_START,				//延时启动	ACTION_SUSPEND,					//暂停	NO_USE ,};	typedef struct{	u64 ActionValue;	u8 ActionType;	u8 SendMode;}SIGNAL_ACTION_HEART;/**运行信息类型**/__packed typedef struct{	u16 u16ColibarateType;//对码方式(红外、无线)或(无线)	u16 u16ScNumbAddDirc;//支架控制器编号编号增项	u16 u16ScNumbColibarated;//所对码的支架控制器编号	u16 u16ScNeigborControled;//所控制的邻架或隔架的支架控制器编号	RFID_FRAME_TYPE sRfidFrameType;//RFID数据类型	u32	u32ScActionName;//邻架(含隔架)、本架、成组动作字(相对应于RFID德数据类型)		SC_GRP_DIRECTION_TYPE	stGrpActionDirection;//成组动作执行的方向	RFID_GRP_ACTION_TYPE	stGrpActionAckName;//成组动作应答字	u16 u16GrpNearScNumb;//成组动作近端架号	u16 u16GrpRemoteScNumb;//成组动作远端架号			LOGIC_RUN_STATUS_TYPE stLogicRunStatus;//运行状态枚举	COMMAND_ACTION CommandActionValue;//按键键值	COMMAND_ACTION CommandActionAckValue;//按键应答键值	SC_BUTTON_TYPE stButtonStatus;//按键接收与否状态	u64 u32ButtonLongValue;//按键长按键值	u64 u64ButtonUpValue; 	u32 u32ScActionType;//邻隔架控制类型	u32 u32ScGejiaNumber;//隔架架数	#if (QUICK_KEY_CTRL_ENABLE_FLAG != 0)		u32 u32ScQuickActionType;//快捷操作动作类型		u32 u32ScQuickActionTimer;//快捷操作动作计时	#endif		/**电量信息**/	BATTERY_STATUS_TYPE		stBatteryStatus;//电池状态	BATTERY_COULOMETRY_TYPE	stBatteryCoulomStatus;//电池电量状态	u16 u16BatteryCoulomData;//电量的真实数值	u16 u16RfidSignStatus;//信号强度	u16 u16ScNumbColibaratedSuccess;	u8 u8ActionInfoCrcIdentical;		//配置文件CRC是否一致，	u8 CtrlMode;			//控制模式}LOGIC_RUNINF_TYPE;/********************************************************************************* 常量定义*********************************************************************************//*********************************设置参数相关宏定义*****************************/	/**设置动作使能标志相关定义**/#if (LAJIA_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_SET_LAJIA_ENABLE_FLAG	 				LOGIC_SET_YIJIA_ENABLE_FLAG#endif#if (SHENG_QIANZHU_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_SET_SHENGQIANZHU_ENABLE_FLAG			LOGIC_SET_SHENGZHU_ENABLE_FLAG#endif#if (JIANG_QIANZHU_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_SET_JIANGQIANZHU_ENABLE_FLAG			LOGIC_SET_JIANGZHU_ENABLE_FLAG#endif#if (SHENG_QIANHOUZHU_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_SET_SHENGQIANHOUZHU_ENABLE_FLAG		LOGIC_SET_SHENGZHU_ENABLE_FLAG#endif			#if (JIANG_QIANHOUZHU_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_SET_JIANGQIANHOUZHU_ENABLE_FLAG		LOGIC_SET_JIANGZHU_ENABLE_FLAG#endif// #if (SHEN_QIANCHABAN_ACT_ENABLED_FLAG	!= DISABLED) // 	#define		LOGIC_SET_SHENQIANCHABAN_ENABLE_FLAG		LOGIC_SET_SHENSHENSUOLIANG_ENABLE_FLAG// #endif// #if (SHOU_QIANCHABAN_ACT_ENABLED_FLAG	!= DISABLED) // 	#define		LOGIC_SET_SHOUQIANCHABAN_ENABLE_FLAG		LOGIC_SET_SHOUSHENSUOLIANG_ENABLE_FLAG// #endif			#if (SHEN_QIANHUBANG_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_SET_SHENQIANHUBANG_ENABLE_FLAG		LOGIC_SET_SHENHUBANG_ENABLE_FLAG#endif#if (SHOU_QIANHUBANG_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_SET_SHOUQIANHUBANG_ENABLE_FLAG		LOGIC_SET_SHOUHUBANG_ENABLE_FLAG#endif#if (SHEN_CETUI_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_SET_SHENCETUI_ENABLE_FLAG				LOGIC_SET_SHENCEHU_ENABLE_FLAG#endif#if (SHOU_CETUI_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_SET_SHOUCETUI_ENABLE_FLAG				LOGIC_SET_SHOUCEHU_ENABLE_FLAG#endif#if (PENWU_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_SET_PENWU_ENABLE_FLAG					LOGIC_SET_DINGLIANGPENWU_ENABLE_FLAG#endif	// #if (SONG_HOULIU_ACT_ENABLED_FLAG	!= DISABLED) // 	#define		LOGIC_SET_SONGHOULIU_ENABLE_FLAG			LOGIC_SET_FANGMEIPENWU_ENABLE_FLAG// #endif	/**设置动作时间相关定义**/#if (LAJIA_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_SET_LAJIA_DOING_TIME					LOGIC_SET_YIJIA_DOING_TIME#endif#if (SHENG_QIANZHU_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_SET_SHENGQIANZHU_DOING_TIME			LOGIC_SET_SHENGZHU_DOING_TIME#endif#if (JIANG_QIANZHU_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_SET_JIANGQIANZHU_DOING_TIME			LOGIC_SET_JIANGZHU_DOING_TIME#endif#if (SHENG_QIANHOUZHU_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_SET_SHENGQIANHOUZHU_DOING_TIME		LOGIC_SET_SHENGZHU_DOING_TIME#endif			#if (JIANG_QIANHOUZHU_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_SET_JIANGQIANHOUZHU_DOING_TIME		LOGIC_SET_JIANGZHU_DOING_TIME#endif#if (SHEN_QIANCHABAN_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_SET_SHENQIANCHABAN_DOING_TIME			LOGIC_SET_SHENSHENSUOLIANG_DOING_TIME#endif#if (SHOU_QIANCHABAN_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_SET_SHOUQIANCHABAN_DOING_TIME			LOGIC_SET_SHOUSHENSUOLIANG_DOING_TIME#endif		#if (SHEN_QIANHUBANG_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_SET_SHENQIANHUBANG_DOING_TIME			LOGIC_SET_SHENHUBANG_DOING_TIME#endif#if (SHOU_QIANHUBANG_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_SET_SHOUQIANHUBANG_DOING_TIME			LOGIC_SET_SHOUHUBANG_DOING_TIME#endif#if (SHEN_CETUI_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_SET_SHENCETUI_DOING_TIME				LOGIC_SET_SHENCEHU_DOING_TIME#endif#if (SHOU_CETUI_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_SET_SHOUCETUI_DOING_TIME				LOGIC_SET_SHOUCEHU_DOING_TIME#endif	#if (PENWU_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_SET_PENWU_DOING_TIME					LOGIC_SET_DINGLIANGPENWU_DOING_TIME#endif		#if (SONG_HOULIU_ACT_ENABLED_FLAG	!= DISABLED) 	#define			LOGIC_SET_SONGHOULIU_DOING_TIME			LOGIC_SET_FANGMEIPENWU_DOING_TIME#endif				/***************************回读参数相关宏定义*********************************************/	/**回读动作时间相关定义****/#if (LAJIA_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_GET_LAJIA_ENABLE_FLAG	 				LOGIC_GET_YIJIA_ENABLE_FLAG#endif#if (SHENG_QIANZHU_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_GET_SHENGQIANZHU_ENABLE_FLAG			LOGIC_GET_SHENGZHU_ENABLE_FLAG#endif#if (JIANG_QIANZHU_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_GET_JIANGQIANZHU_ENABLE_FLAG			LOGIC_GET_JIANGZHU_ENABLE_FLAG#endif#if (SHENG_QIANHOUZHU_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_GET_SHENGQIANHOUZHU_ENABLE_FLAG		LOGIC_GET_SHENGZHU_ENABLE_FLAG#endif			#if (JIANG_QIANHOUZHU_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_GET_JIANGQIANHOUZHU_ENABLE_FLAG		LOGIC_GET_JIANGZHU_ENABLE_FLAG#endif#if (SHEN_QIANCHABAN_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_GET_SHENQIANCHABAN_ENABLE_FLAG		LOGIC_GET_SHENSHENSUOLIANG_ENABLE_FLAG#endif#if (SHOU_QIANCHABAN_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_GET_SHOUQIANCHABAN_ENABLE_FLAG		LOGIC_GET_SHOUSHENSUOLIANG_ENABLE_FLAG#endif			#if (SHEN_QIANHUBANG_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_GET_SHENQIANHUBANG_ENABLE_FLAG		LOGIC_GET_SHENHUBANG_ENABLE_FLAG#endif#if (SHOU_QIANHUBANG_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_GET_SHOUQIANHUBANG_ENABLE_FLAG		LOGIC_GET_SHOUHUBANG_ENABLE_FLAG#endif#if (SHEN_CETUI_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_GET_SHENCETUI_ENABLE_FLAG				LOGIC_GET_SHENCEHU_ENABLE_FLAG#endif#if (SHOU_CETUI_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_GET_SHOUCETUI_ENABLE_FLAG				LOGIC_GET_SHOUCEHU_ENABLE_FLAG#endif#if (PENWU_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_GET_PENWU_ENABLE_FLAG					LOGIC_GET_DINGLIANGPENWU_ENABLE_FLAG#endif	#if (SONG_HOULIU_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_GET_SONGHOULIU_ENABLE_FLAG			LOGIC_GET_FANGMEIPENWU_ENABLE_FLAG#endif	/**回读动作时间相关定义****/#if (LAJIA_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_GET_LAJIA_DOING_TIME					LOGIC_GET_YIJIA_DOING_TIME#endif#if (SHENG_QIANZHU_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_GET_SHENGQIANZHU_DOING_TIME			LOGIC_GET_SHENGZHU_DOING_TIME#endif#if (JIANG_QIANZHU_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_GET_JIANGQIANZHU_DOING_TIME			LOGIC_GET_JIANGZHU_DOING_TIME#endif#if (SHENG_QIANHOUZHU_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_GET_SHENGQIANHOUZHU_DOING_TIME		LOGIC_GET_SHENGZHU_DOING_TIME#endif			#if (JIANG_QIANHOUZHU_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_GET_JIANGQIANHOUZHU_DOING_TIME		LOGIC_GET_JIANGZHU_DOING_TIME#endif#if (SHEN_QIANCHABAN_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_GET_SHENQIANCHABAN_DOING_TIME			LOGIC_GET_SHENSHENSUOLIANG_DOING_TIME#endif#if (SHOU_QIANCHABAN_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_GET_SHOUQIANCHABAN_DOING_TIME			LOGIC_GET_SHOUSHENSUOLIANG_DOING_TIME#endif		#if (SHEN_QIANHUBANG_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_GET_SHENQIANHUBANG_DOING_TIME			LOGIC_GET_SHENHUBANG_DOING_TIME#endif#if (SHOU_QIANHUBANG_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_GET_SHOUQIANHUBANG_DOING_TIME			LOGIC_GET_SHOUHUBANG_DOING_TIME#endif#if (SHEN_CETUI_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_GET_SHENCETUI_DOING_TIME				LOGIC_GET_SHENCEHU_DOING_TIME#endif#if (SHOU_CETUI_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_GET_SHOUCETUI_DOING_TIME				LOGIC_GET_SHOUCEHU_DOING_TIME#endif	#if (PENWU_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_GET_PENWU_DOING_TIME					LOGIC_GET_DINGLIANGPENWU_DOING_TIME#endif		#if (SONG_HOULIU_ACT_ENABLED_FLAG	!= DISABLED) 	#define		LOGIC_GET_SONGHOULIU_DOING_TIME				LOGIC_GET_FANGMEIPENWU_DOING_TIME#endif/********************************************************************************* 变量定义*********************************************************************************/extern OS_EVENT  *g_stLogicSem;	//逻辑层信号量/********************************************************************************* 函数声明*********************************************************************************/u32 LogicInint(void);u32 LogicParamApi(LOGIC_PARAM_MSG_TYPE sMsg,void *pData);u32 LogicRunInfApi(LOGIC_RUN_MSG_TYPE sMsg,void *pData);void LogicShutdownProc(void);void Logic_task(void *p_arg);#endif